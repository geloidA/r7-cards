
@if (TooltipTitle is { })
{
    <Tooltip Title="@(Disabled ? DisabledTitle : TooltipTitle)" Placement="TooltipPlacement" >
        <div class="d-flex align-items-center tool @cssDisabled" @onclick="OnClickHandler">
            <Icon Name="IconName" Size="IconSize" Color="IconColor"/>
            @if (Text is { })
            {
                <div class="ms-1">@Text</div>
            }
        </div>
    </Tooltip>
}
else
{
    <div class="d-flex justify-content-center align-items-center tool @cssDisabled" @onclick="OnClickHandler">
        <Icon Name="IconName" Size="IconSize" Color="IconColor"/>
        @if (Text is { })
        {
            <div class="ms-1">@Text</div>
        }
    </div>
}



@code {
    private string cssDisabled = null!;
    [Parameter] public bool Disabled { get; set; }
    [Parameter] public string DisabledTitle { get; set; } = "Недоступно";
    [Parameter] public IconName IconName { get; set; }
    [Parameter] public IconSize IconSize { get; set; }
    [Parameter] public string? Text { get; set; }
    [Parameter] public string? TooltipTitle { get; set; }
    [Parameter] public TooltipPlacement TooltipPlacement { get; set; }
    [Parameter] public IconColor IconColor { get; set; }
    [Parameter] public EventCallback<MouseEventArgs> OnClick { get; set; }

    protected override void OnInitialized()
    {
        cssDisabled = Disabled ? "disabled" : "";
    }

    private async Task OnClickHandler(MouseEventArgs args)
    {
        if (OnClick.HasDelegate && !Disabled)
        {
            await OnClick.InvokeAsync(args);
        }
    }
}
