@inject IProjectApi ProjectApi

<Card>
    <CardBody style="max-height: 300px; min-height: 160px; overflow-y: scroll;">
        <CardTitle>
            <div class="d-flex align-items-center">
                <Icon Name="IconName.UiChecks" />
                <span class="ms-1">Подзадачи</span>
            </div>
        </CardTitle>
        @if (Task.Subtasks?.Any() ?? false)
        {
            <CascadingValue Value="lastEditingSubtask" >
                @foreach (var subtask in Task.Subtasks)
                {
                    <SubtaskView Subtask="subtask" Task="Task" EditModeChanged="next => lastEditingSubtask = next" 
                        CanEdit="!Disabled" @key="subtask.Id" />
                }
            </CascadingValue>
        }
        else
        {
            <span class="text-secondary">Список пуст</span>
        }
    </CardBody>
    <CardFooter class="d-flex justify-content-end bg-main">
        <Tool IconName="IconName.Plus" IconSize="IconSize.x5" TooltipTitle="Добавить"
            Disabled="Disabled || Task.StatusColumn.StatusType == Status.Closed" @onclick="ShowCreationModal" />
    </CardFooter>
</Card>

@code {
    private SubtaskView? lastEditingSubtask;
    private string userId = null!;
    
    [CascadingParameter(Name = "MiddleModal")] ModalOptions ModalOptions { get; set; } = null!;
    [CascadingParameter] private Task<AuthenticationState>? AuthenticationState { get; set; }
    [CascadingParameter] IModalService Modal { get; set; } = default!;
    [Parameter] public TaskModel Task { get; set; } = null!;
    [Parameter] public bool Disabled { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Task.Subtasks.CollectionChanged += (_, _) => Refresh();
        if (AuthenticationState is { })
        {
            var state = await AuthenticationState;
            userId = state.User.FindFirst("UserId")?.Value ?? throw new NullReferenceException("User ID is null");
        }
    }

    private void Refresh() => StateHasChanged();

    private async Task ShowCreationModal()
    {
        var res = await Modal.Show<SubtaskCreationModal>("Добавление подзадачи", 
            new ModalParameters { { "Project", Task.ProjectOwner } }, ModalOptions).Result;

        if (res.Confirmed)
        {
            var data = (SubtaskCreationModal.SubtaskState)res.Data!;
            var created = await ProjectApi.CreateSubtaskAsync(Task.Id, data.Title, data.Responsible?.Id);
            var subtaskModel = new SubtaskModel(created);
            Task.Subtasks?.Add(subtaskModel);
        }
    }
}
