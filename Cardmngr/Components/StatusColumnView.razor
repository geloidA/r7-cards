@using TypeStatus = Onlyoffice.Api.Models.TaskStatus
@using MyTask = Onlyoffice.Api.Models.Task

@inject IProjectApi ProjectApi

<div class="board-column @CssDragOver @CssCollapsed user-select-none" @ondrop="OnDrop"
    @ondragover:preventDefault @ondragenter:preventDefault @ondblclick="() => isCollapsed = !isCollapsed"
    @ondragover="@(() => { if (!highlighted) highlighted = true; })"
    @ondragleave="() => highlighted = false">
    @if (isCollapsed)
    {
        <div class="d-flex flex-column mt-1">            
            <Badge class="align-self-center" Color="BadgeColor.Success">@TaskStatusModel.Count</Badge>
            <span class="mt-2 text-vertical ">
                @TaskStatusModel.Title
            </span>
            <div class="mt-2 align-self-center">
                @if (TaskStatusModel.Image is { })
                {
                    <img src=@($"data:{TaskStatusModel.ImageType};base64, {TaskStatusModel.Image}")
                        style="max-width: 18px;">
                }
            </div>
        </div>
    }
    else
    {
        <div class="row mb-2 ">
            <div class="col-md-10 align-self-baseline" >
                <div class="row">
                    <div class="col-md-10">
                        <Badge Color="BadgeColor.Success">@TaskStatusModel.Count</Badge>
                        <span class="ms-1 user-select-none">
                            @TaskStatusModel.Title
                        </span>
                        @if (TaskStatusModel.Image is { })
                        {
                            <img src=@($"data:{TaskStatusModel.ImageType};base64, {TaskStatusModel.Image}")
                                style="max-width: 18px;">
                        }
                    </div>
                </div>
            </div>
            <div class="col-md-2 hidden">
                @DropDown
            </div>
        </div>
        @if (MilestoneTimelineModel?.SelectedMilestones.Any() ?? false)
        {
            <div class="mb-1 d-flex justify-content-center fw-light" style="font-size: small;">
                @TaskStatusModel.Where(FilterByMilestones).Count() результатов
            </div>
        }
        <ul class="card-container scrollbar-none">
            @foreach (var task in TaskStatusModel.Where(FilterByMilestones))
            {
                <TaskView Task="task" @key="task.Id" />
            }
        </ul>
    }
</div>

@code {
    string CssDragOver => highlighted ? "dragover" : "";
    string CssCollapsed => isCollapsed ? "collapsed" : "";
    bool highlighted;
    bool isCollapsed;

    [CascadingParameter(Name = "MiddleModal")] ModalOptions ModalOptions { get; set; } = null!;
    [CascadingParameter(Name = "DetailsModal")] ModalOptions DetailsOptions { get; set; } = null!;
    [CascadingParameter] IModalService Modal { get; set; } = default!;

    [CascadingParameter] StatusColumnsModel StatusColumnsModel { get; set; } = null!;
    [CascadingParameter] MilestoneTimelineModel MilestoneTimelineModel { get; set; } = null!;
    [Parameter] public TaskStatusColumn TaskStatusModel { get; set; } = null!;

    private async Task OnDrop()
    {
        highlighted = false;
        var dropped = StatusColumnsModel.LastDraggedTask;
        if (dropped is { } && !ReferenceEquals(dropped.StatusColumn, TaskStatusModel))
        {
            if (TaskStatusModel.StatusType == Status.Closed && !dropped.CanMarkClosed)
            {
                var modalRes = await ShowCloseCardConfirmModal();
                if (modalRes.Cancelled) return;
                dropped.CloseAllSubtasks();
            }
            
            await ProjectApi.UpdateTaskStatusAsync(dropped.Id, TaskStatusModel.StatusType, TaskStatusModel.Id);
            dropped.StatusColumn = TaskStatusModel;
            StatusColumnsModel.ClearDraggedTask();
        }
    }

    private async Task<ModalResult> ShowCloseCardConfirmModal()
    {
        var modal = Modal.Show<CloseCardConfirmModal>("Закрытие задачи", ModalOptions);
        return await modal.Result;
    }
    
    private async Task ShowCreateCardModal()
    {
        var parameters = new ModalParameters
        {
            { "Model", new TaskModel(new MyTask { CanEdit = true }, TaskStatusModel) },
            { "IsCreation", true }
        };

        await Modal.Show<TaskDetailsModal>("", parameters, DetailsOptions).Result;
    }

    private bool FilterByMilestones(TaskModel task)
    {
        return !MilestoneTimelineModel.SelectedMilestones.Any() || 
            MilestoneTimelineModel.SelectedMilestones.Any(x => x.Id == task.Milestone?.Id);
    }

    private RenderFragment DropDown => 
        @<Dropdown Size="Size.ExtraSmall" AutoClose="true" >
            <DropdownToggleButton Color="ButtonColor.Light">
                <Icon Name="IconName.ThreeDots" />
            </DropdownToggleButton>
            <DropdownMenu>
                <DropdownItem @onclick="ShowCreateCardModal"
                    >Добавить карточку</DropdownItem>
            </DropdownMenu>
        </Dropdown>;
}