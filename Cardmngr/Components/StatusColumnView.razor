<div class="board-column @CssDragOver @CssCollapsed user-select-none" @ondrop="OnDrop"
    @ondragover:preventDefault @ondragenter:preventDefault @ondblclick="() => isCollapsed = !isCollapsed"
    @ondragover="@(() => { if (!highlighted) highlighted = true; })"
    @ondragleave="() => highlighted = false">
    @if (isCollapsed)
    {
        <div class="d-flex flex-column mt-1">
            <Badge class="align-self-center" Color="BadgeColor.Success">@StatusColumn.Count</Badge>
            <span class="mt-2 text-vertical ">
                @StatusColumn.Title
            </span>
            <div class="mt-2 align-self-center">
                @if (StatusColumn.Image is { })
                {
                    <img src=@($"data:{StatusColumn.ImageType};base64, {StatusColumn.Image}")
                        style="max-width: 18px;">
                }
            </div>
        </div>
    }
    else
    {
        <div class="row mb-2 ">
            <div class="col-md-10 align-self-baseline" >
                <div class="row">
                    <div class="col-md-10">
                        <Badge Color="BadgeColor.Success">@StatusColumn.Count</Badge>
                        <span class="ms-1 user-select-none">
                            @StatusColumn.Title
                        </span>
                        @if (StatusColumn.Image is { })
                        {
                            <img src=@($"data:{StatusColumn.ImageType};base64, {StatusColumn.Image}")
                                style="max-width: 18px;">
                        }
                    </div>
                </div>
            </div>
            @if (StatusColumn.Available)
            {
                <div class="col-md-2 hidden">
                    @DropDown
                </div>
            }
        </div>
        @if (Project?.SelectedMilestones.Any() ?? false)
        {
            <div class="mb-1 d-flex justify-content-center fw-light" style="font-size: small;">
                @StatusColumn.Where(FilterByMilestones).Count() результатов
            </div>
        }
        <ul class="card-container scrollbar-none">
            @foreach (var task in StatusColumn.Where(FilterByMilestones))
            {
                <TaskView IsFeedback="IsFeedback" Task="task" @key="task.Id" />
            }
        </ul>
    }
</div>

@code {
    private int? lastProjectId;
    private ProjectModel Project => (ProjectModel)StatusColumn.Project;
    string CssDragOver => highlighted ? "dragover" : "";
    string CssCollapsed => isCollapsed ? "collapsed" : "";
    bool highlighted;
    bool isCollapsed;

    [CascadingParameter(Name = "MiddleModal")] ModalOptions ModalOptions { get; set; } = null!;
    [CascadingParameter(Name = "DetailsModal")] ModalOptions DetailsOptions { get; set; } = null!;
    [CascadingParameter] IModalService Modal { get; set; } = default!;

    [CascadingParameter] IProjectApi ProjectApi { get; set; } = null!;
    [CascadingParameter] IStatusColumnBoard StatusColumnBoard { get; set; } = null!;
    [Parameter] public IStatusColumnModel StatusColumn { get; set; } = null!;
    [Parameter] public bool IsFeedback { get; set; }

    protected override void OnParametersSet()
    {
        if (lastProjectId == null || StatusColumn.Project.Id != lastProjectId)
        {
            lastProjectId = StatusColumn.Project.Id;
            StatusColumn.ModelChanged += StateHasChanged;
        }
    }

    private async Task OnDrop()
    {
        highlighted = false;
        var dropped = StatusColumnBoard.LastDraggedTask;
        if (dropped is { } && !ReferenceEquals(dropped.StatusColumn, StatusColumn))
        {
            if (StatusColumn.Status == Status.Closed && !dropped.CanMarkClosed())
            {
                var modalRes = await ShowCloseCardConfirmModal();
                if (modalRes.Cancelled) return;
                dropped.CloseAllSubtasks();
            }
            
            await ProjectApi.UpdateTaskStatusAsync(dropped.Id, StatusColumn.Status, StatusColumn.Id);
            dropped.StatusColumn = StatusColumn;
            StatusColumnBoard.UnsetDraggedTask();
        }
    }

    private async Task<ModalResult> ShowCloseCardConfirmModal()
    {
        var modal = Modal.Show<CloseCardConfirmModal>("Закрытие задачи", ModalOptions);
        return await modal.Result;
    }
    
    private async Task ShowCreateTaskModal()
    {
        var parameters = new ModalParameters
        {
            { "Model", new TaskModel(new MyTask { CanEdit = true }, StatusColumn) },
            { "IsCreation", true },
            { "IsFeedback", IsFeedback },
            { "ProjectApi", ProjectApi }
        };

        await Modal.Show<TaskDetailsModal>("", parameters, DetailsOptions).Result;
    }

    private bool FilterByMilestones(ITaskModel task)
    {
        return !Project.SelectedMilestones.Any() || 
            Project.SelectedMilestones.Any(x => x.Id == task.Milestone?.Id);
    }

    private RenderFragment DropDown => 
        @<Dropdown Size="Size.ExtraSmall" AutoClose="true" >
            <DropdownToggleButton Color="ButtonColor.Light">
                <Icon Name="IconName.ThreeDots" />
            </DropdownToggleButton>
            <DropdownMenu>
                <DropdownItem @onclick="ShowCreateTaskModal"
                    >Добавить карточку</DropdownItem>
            </DropdownMenu>
        </Dropdown>;
}