@using Onlyoffice.Api.Common
@using System.Security.Claims

@inject IProjectApi ProjectApi
@inject AuthenticationStateProvider AuthenticationState

<li class="my-card @CssDragStart @CssDeadline" @onclick="OpenModal" draggable="@Task.CanEdit.ToString()"
    @ondragstart="OnDragStart" @ondragend="() => isDragged = false" >
    <div class="container py-1 px-4 default-text" style="min-height: 100px;">
        <div class="row py-1">
            <div class="px-0 d-flex flex-row">
                @if (Task.Priority == TaskPriority.High)
                {
                    <div style="margin-right: 5px;">
                        <Tool IconName="IconName.ArrowUpCircleFill" IconColor="IconColor.Primary" 
                            TooltipTitle="Приоритет - Высокий" TooltipPlacement="TooltipPlacement.Bottom" />
                    </div>
                }
                <div style="overflow: hidden;">@Task.Title</div>
            </div>
        </div>
        @if (Task.Description is { })
        {
            <div class="row fw-light max-height-100" >
                @Task.Description
            </div>
        }
        @if (Task.Subtasks?.Any() ?? false)
        {
            <div class="row py-1">
                <div class="d-flex justify-content-end">
                    + @Task.Subtasks.Count подзадачи
                </div>
            </div>
        }
        @if (Task.Milestone is { })
        {
            <div class="row py-1">
                <div class="px-0">
                    <MilestoneLabel Milestone="Task.Milestone" />
                </div>
            </div>
        }
        @if (Task.Responsibles?.Any() ?? false)
        {
            <div class="row py-1">
                <div class="px-0">
                    <ResponsiblesView Responsibles="Task.Responsibles" ImageSize="25" ShowName="true" MaxCount="2" />
                </div>
            </div>
        }
        @if (Task.Deadline is { })
        {
            <div class="row py-1">
                <div class="d-flex p-0 justify-content-end align-items-center">
                    @if (Task.IsDeadlineOut())
                    {
                        <Tool IconName="IconName.Fire" IconColor="IconColor.Danger" 
                            TooltipTitle="@(GetDeadlineString())" TooltipPlacement="TooltipPlacement.Left" />
                        <span class="small ms-2 text-danger" >
                            Крайний срок:
                            @Task.Deadline?.ToString("d MMM yyyy г.")</span>
                    }
                    else
                    {
                        <span class="small ms-2 fw-lighter" >
                            Крайний срок:
                            @Task.Deadline?.ToString("d MMM yyyy г.")</span>
                    }
                </div>
            </div>
        }
    </div>
</li>

@code {
    
    [CascadingParameter(Name = "DetailsModal")]
    private ModalOptions DetailsModal { get; set; } = null!;

    [CascadingParameter] IModalService Modal { get; set; } = null!;
    [CascadingParameter] StatusColumnsModel StatusColumnsModel { get; set; } = null!;
    
    string CssDragStart => isDragged ? "dragged" : "";
    string CssDeadline => Task.IsDeadlineOut() ? "red-border" : "";

    private bool isDragged;
    [Parameter] public TaskModel Task { get; set; } = null!;

    private async Task OpenModal()
    {
        var parameters = new ModalParameters
        {
            { "Task", Task },
        };

        await Modal.Show<TaskDetailsModal>("", parameters, DetailsModal).Result;
    }

    private string GetDeadlineString()
    {
        if (Task.Deadline is not { }) throw new InvalidOperationException("Task deadline is null");
        var diff = DateTime.Now.Date - Task.Deadline.Value.Date;
        return diff.TotalDays == 0
            ? "Срок истек - Сегодня"
            : $"Срок истек - {diff.TotalDays} {Utils.Common.GetDayNameByDayCount(diff.TotalDays)} назад";
    }

    void OnDragStart()
    {
        isDragged = true;
        StatusColumnsModel.StartDrag(Task);
    }
}