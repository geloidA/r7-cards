@inject ResponsibleSelectionDialog SelectionDialog
@inject IProjectApi ProjectApi
@inject ToastService ToastService

@if (changingState is { })
{
    <div class="row">
        <TitleChanger @bind-Title="changingState.Title" />
        <div class="mt-3">
            <Card >
                <CardBody class="d-flex flex-column">
                    <CardTitle>
                        <div class="row d-flex align-items-center">
                            <div class="col"> 
                                Ответственный
                            </div>
                            <div class="col d-flex justify-content-end">
                                <Tool IconName="IconName.Pencil" IconSize="IconSize.x6"
                                    TooltipTitle="Изменить" OnClick="ShowSelectionDialog" />
                            </div>
                        </div>
                    </CardTitle>
                    <UserAvatar ShowName="true" User="changingState.Responsible" />
                </CardBody>
            </Card>
        </div>
        <DescriptionChanger Class="mt-3" @bind-Description="changingState.Description" />
    </div>
    <div class="row mt-3 py-1 mx-0" style="border-radius: 5px; border: 1px solid;">
        <DateChanger Title="Крайний срок" EmptyText="Не установлен" @bind-Date="changingState.Deadline" />
    </div>
    <div class="d-flex mt-3 flex-row justify-content-end">
        <Button Loading="saving" Type="ButtonType.Submit" Color="ButtonColor.Success" Outline="true" @onclick="Save" >
            Сохранить
        </Button>
        <Button class="ms-2" Color="ButtonColor.Danger" @onclick="Delete" Outline="true" >
            Удалить
        </Button>
    </div>
}

@code {
    private bool saving;
    private Onlyoffice.Api.Models.Milestone changingState = null!;

    [CascadingParameter(Name = "MiddleModal")] ModalOptions ModalOptions { get; set; } = null!;
    [CascadingParameter] BlazoredModalInstance CurrentModel { get; set; } = null!;

    [Parameter] public Onlyoffice.Api.Models.Milestone Milestone { get; set; } = null!;

    protected override void OnInitialized()
    {
        changingState = Milestone.FullCopy();
    }

    private async Task ShowSelectionDialog()
    {
        var selected = await SelectionDialog.ShowAsync(Milestone.ProjectOwner!.Id, ModalOptions);

        if (selected is { })
        {
            changingState.Responsible = selected;
        }
    }

    private async Task Save()
    {
        if (changingState.Deadline is null)
        {
            ToastService.Notify(new(ToastType.Danger, "Крайний срок должен быть указан."));
            return;
        }

        saving = true;

        await ProjectApi.UpdateMilestoneAsync(Milestone.Id, changingState.GetUpdatedState());

        await CurrentModel.CloseAsync(ModalResult.Ok(new ModalAction<Onlyoffice.Api.Models.Milestone>(ModalActionType.Update, changingState)));
    }

    private async Task Delete()
    {
        await ProjectApi.DeleteMilestoneAsync(Milestone.Id);
        await CurrentModel.CloseAsync(ModalResult.Ok(new ModalAction<Onlyoffice.Api.Models.Milestone>(ModalActionType.Delete, changingState)));
    }

    internal record ModalAction<T>(ModalActionType Type, T Data);
    internal enum ModalActionType
    {
        Create,
        Delete,
        Update
    }
}