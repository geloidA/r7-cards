@inject TeamMemberSelectionDialog SelectionDialog
@inject IProjectApi ProjectApi
@inject ToastService ToastService

@if (changingState is { })
{
    <div class="row">
        <TitleChanger Disabled="Disabled" @bind-Title="changingState.Title" />
        <div class="mt-3">
            <Card >
                <CardBody class="d-flex flex-column">
                    <CardTitle>
                        <div class="row d-flex align-items-center">
                            <div class="col"> 
                                Ответственный
                            </div>
                            <div class="col d-flex justify-content-end">
                                <Tool IconName="IconName.Pencil" IconSize="IconSize.x6"
                                    TooltipTitle="Изменить" Disabled="Disabled" OnClick="ShowSelectionDialog" />
                            </div>
                        </div>
                    </CardTitle>
                    <UserAvatar ShowName="true" User="changingState.Responsible" />
                </CardBody>
            </Card>
        </div>
        <DescriptionChanger Disabled="Disabled" Class="mt-3" @bind-Description="changingState.Description" />
    </div>
    <div class="row mt-3 py-1 mx-0" style="border-radius: 5px; border: 1px solid gray;">
        <DateChanger Title="Крайний срок" Disabled="Disabled" EmptyText="Не установлен" @bind-Date="changingState.Deadline" />
    </div>
    <div class="d-flex mt-3 flex-row justify-content-end">
        <Button Loading="saving" Disabled="Disabled" Type="ButtonType.Submit" Color="ButtonColor.Success" Outline="true" @onclick="Save" >
            Сохранить
        </Button>
        <Button class="ms-2" Disabled="Disabled" Color="ButtonColor.Danger" @onclick="Delete" Outline="true" >
            Удалить
        </Button>
    </div>
}

@code {
    private bool saving;
    private MilestoneModel changingState = null!;

    [CascadingParameter(Name = "MiddleModal")] ModalOptions ModalOptions { get; set; } = null!;
    [CascadingParameter] BlazoredModalInstance CurrentModel { get; set; } = null!;
    [CascadingParameter] IModalService Modal { get; set; } = null!;

    [Parameter] public MilestoneModel Milestone { get; set; } = null!;
    [Parameter] public bool Disabled { get; set; }

    protected override void OnInitialized()
    {
        changingState = Milestone.Clone();
    }

    private async Task ShowSelectionDialog()
    {
        var selected = await SelectionDialog.ShowAsync(Milestone.Project, ModalOptions);

        if (selected is { })
        {
            changingState.Responsible = selected;
        }
    }

    private async Task Save()
    {
        if (changingState.Deadline is null)
        {
            ToastService.Notify(new(ToastType.Danger, "Крайний срок должен быть указан."));
            return;
        }

        saving = true;

        var milestone = await ProjectApi.UpdateMilestoneAsync(Milestone.Id, changingState.GetUpdatedState());
        Milestone.Update(milestone);
        await CurrentModel.CloseAsync(ModalResult.Ok());
    }

    private async Task Delete()
    {
        var result = await Modal.Show<DefaultConfirmModal>("Удалить?", ModalOptions).Result;

        if (result.Confirmed)
        {
            await ProjectApi.DeleteMilestoneAsync(Milestone.Id);
            Milestone.Project.DeleteMilestone(Milestone);
            await CurrentModel.CloseAsync(ModalResult.Ok());
        }        
    }
}