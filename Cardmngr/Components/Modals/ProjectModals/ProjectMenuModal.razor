@inject IProjectApi ProjectApi


@if (ProjectModel is { })
{
    <div class="container">
        <div class="row header">
            <div class="d-flex flex-row align-items-center mb-2">
                <span>@ProjectModel.Title</span>
                <Tooltip Title="Кол-во открытых задач">
                    <Badge class="p-1 ms-1 user-select-none" Color="BadgeColor.Info">
                        @ProjectModel.TaskCount
                    </Badge>
                </Tooltip>
                @if (ProjectModel.IsPrivate)
                {
                    <div class="ms-1">
                        <Tool IconName="IconName.LockFill" IconColor="IconColor.Warning" TooltipTitle="Приватный проект" />
                    </div>
                }
            </div>
        </div>
        <div class="row mt-2 align-items-center">
            <div class="col">
                <i class="text-secondary fw-light small">
                    Создан - @ProjectModel.Created.ToShortDateString()
                </i>
            </div>
            <div class="col d-flex justify-content-end">                
                @RenderStatus(GetDataByStatus(ProjectModel.Status))
            </div>
        </div>
        <div class="row mt-3">
            <span>@ProjectModel.Description</span>
        </div>
        <Card class="row mt-4 p-1 bg-shadow">
            <CardTitle class="mt-2">
                <h6>
                    Вехи
                    <Badge class="p-1" Color="BadgeColor.Info">@ProjectModel.Milestones.Count</Badge>
                </h6>
            </CardTitle>
            <CardBody class="m-0" style="max-height: 190px; overflow: auto;">
                <MilestoneList Milestones="ProjectModel.Milestones" />
            </CardBody>
        </Card>
        <Card class="row mt-4 p-1 bg-shadow">
            <CardTitle class="mt-2">
                <h6>
                    Команда 
                    <Badge class="p-1" Color="BadgeColor.Info">@ProjectModel.TeamCount</Badge>
                </h6>
            </CardTitle>
            <CardBody class="m-0" style="max-height: 255px; overflow: auto;">
                <UserList Users="ProjectModel.Team" />
            </CardBody>
        </Card> 
        <div class="mt-4 d-flex align-items-center justify-content-end">
            <h6>Менеджер проекта</h6>
            <Badge class="d-flex ms-2 py-0" Color="BadgeColor.Success" IndicatorType="BadgeIndicatorType.RoundedPill">
                <UserAvatar ShowName="true" Size="25" User="ProjectModel.Responsible" />
            </Badge>
        </div>       
    </div>
}

@code {

    [Parameter]
    public ProjectModel ProjectModel { get; set; } = null!;


    private static StatusData GetDataByStatus(ProjectStatus status)
    {
        return status switch
        {
            ProjectStatus.Paused => StatusData.Paused,
            ProjectStatus.Open => StatusData.Open,
            ProjectStatus.Closed => StatusData.Closed,
            _ => throw new NotImplementedException("Unknown ProjectStatus type")
        };
    }

    private static RenderFragment<StatusData> RenderStatus => data =>
        @<Badge Color="data.BadgeColor" class="user-select-none">
            <div class="d-flex align-items-center" >
                <span style="font-size: small;">@data.Title</span>
                <Icon class="ms-1 d-flex" Name="data.IconName" />
            </div>
        </Badge>;

    private class StatusData(BadgeColor badgeColor, IconName iconName, string title)
    {
        public BadgeColor BadgeColor => badgeColor;
        public IconName IconName => iconName;
        public string Title => title;

        public static StatusData Open => new(BadgeColor.Primary, IconName.ForwardFill, "Открыт");
        public static StatusData Closed => new(BadgeColor.Success, IconName.CheckCircleFill, "Закрыт");
        public static StatusData Paused => new(BadgeColor.Secondary, IconName.PauseCircleFill, "Приостановлен");
    }
}
