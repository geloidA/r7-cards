@inject IProjectApi ProjectApi

@if (Card is { })
{
    <div class="container">
        <div>
            <MyCardTitle Task="changingState" Disabled="!IsCanEdit" />
        </div>
        <div class="row py-3">
            <div class="col" >
                <CardInfoHeader Task="changingState" Disabled="!IsCanEdit" />
            </div>
            <dic class="col">                
                <div class="row">
                    <div>
                        <CascadingValue IsFixed="true" Value="commonOptions" >
                            <CardResponsibles Task="changingState" Disabled="!IsCanEdit" />
                        </CascadingValue>
                    </div>
                </div>
            </dic>
        </div>
        <div class="row">
            <div class="col">
                <CardDescription Task="changingState" Disabled="!IsCanEdit" />
            </div>
            <div class="col">
                <div class="row">
                    <div>
                        <CardSubtasks Task="changingState" Disabled="!IsCanEdit" />
                    </div>
                </div>
                <div class="row py-3 d-flex align-items-end justify-content-end">
                    <div class="d-flex flex-row">
                        <Button Loading="saveLoading" Color="ButtonColor.Success" Outline="true" @onclick="ConfirmSaving"
                            Disabled="!IsCanEdit" >
                            Сохранить
                        </Button>
                        <Button class="ms-2" @onclick="ShowDeleteConfirmModal" Color="ButtonColor.Danger" Outline="true"
                            Disabled="!IsCanEdit" >
                            Удалить
                        </Button>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private bool saveLoading;
    private Onlyoffice.Api.Models.Task changingState = null!;
    private readonly ModalOptions commonOptions = new()
    {
        Position = ModalPosition.Middle
    };

    [CascadingParameter] BlazoredModalInstance CurrentModel { get; set; } = null!;
    [CascadingParameter] IModalService Modal { get; set; } = default!;
    private Onlyoffice.Api.Models.Task Task => Card.GetTask();
    [Parameter] public BlazorCards.Card Card { get; set; } = null!;
    [Parameter] public bool IsCanEdit { get; set; }

    protected override void OnInitialized()
    {
        changingState = Task.FullCopy(false);
    }

    private async Task ConfirmSaving()
    {
        saveLoading = true;

        await ProjectApi.UpdateTaskAsync(changingState.Id, changingState.GetUpdateState());
        Card.Title = changingState.Title;
        Card.Description = changingState.Description;
        Card.Data = changingState;

        await CurrentModel.CloseAsync(ModalResult.Ok());
    }

    private async Task ShowDeleteConfirmModal()
    {
        var modal = Modal.Show<DefaultConfirmModal>("Удалить?", commonOptions);

        var result = await modal.Result;

        if (result.Confirmed)
        {
            await ProjectApi.DeleteTaskAsync(Task.Id);
            Card.Column!.Remove(Card);
            Card.Dispose();
            await CurrentModel.CloseAsync();
        }
    }
}