@inject IProjectApi ProjectApi

@if (Card is { })
{
    <div class="container">
        <div>
            <MyCardTitle Task="changingState" Disabled="!IsCanEdit" />
        </div>
        <div class="d-flex flex-row">
            <div class="col px-2 d-flex flex-column" >
                <CardInfoHeader Task="changingState" Disabled="!IsCanEdit" />
                <div class="pt-2">
                    <CardDescription Task="changingState" Disabled="!IsCanEdit" />  
                </div>              
            </div>
            <div class="col d-flex flex-column">
                <div class="pb-2">
                    <CardResponsibles Task="changingState" Disabled="!IsCanEdit" />
                </div>
                <div class="pb-2">                    
                    <CardMilestone Task="changingState" Disabled="!IsCanEdit" />
                </div>
                <CardSubtasks Task="changingState" Disabled="!IsCanEdit" />
                <div class="row pt-2 d-flex justify-content-end">
                    <div class="d-flex flex-row">
                        <Button Loading="saveLoading" Color="ButtonColor.Success" Outline="true" @onclick="ConfirmSaving"
                            Disabled="!IsCanEdit" >
                            Сохранить
                        </Button>
                        <Button class="ms-2" @onclick="ShowDeleteConfirmModal" Color="ButtonColor.Danger" Outline="true"
                            Disabled="!IsCanEdit" >
                            Удалить
                        </Button>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private bool saveLoading;
    private Onlyoffice.Api.Models.Task changingState = null!;

    [CascadingParameter(Name = "MiddleModal")] ModalOptions ModalOptions { get; set; } = null!;
    [CascadingParameter] BlazoredModalInstance CurrentModel { get; set; } = null!;
    [CascadingParameter] IModalService Modal { get; set; } = default!;
    [Parameter] public BlazorCards.Card Card { get; set; } = null!;
    [Parameter] public bool IsCanEdit { get; set; }
    private Onlyoffice.Api.Models.Task Task => Card.GetTask();

    protected override void OnInitialized()
    {
        changingState = Task.FullCopy(false);
    }

    private async Task ConfirmSaving()
    {
        saveLoading = true;

        await ProjectApi.UpdateTaskAsync(changingState.Id, changingState.GetUpdateState());
        Card.Title = changingState.Title;
        Card.Description = changingState.Description;
        Card.Data = changingState;

        await CurrentModel.CloseAsync(ModalResult.Ok());
    }

    private async Task ShowDeleteConfirmModal()
    {
        var result = await Modal.Show<DefaultConfirmModal>("Удалить?", ModalOptions).Result;

        if (result.Confirmed)
        {
            await ProjectApi.DeleteTaskAsync(Task.Id);
            Card.Column!.Remove(Card);
            await CurrentModel.CloseAsync();
        }
    }
}