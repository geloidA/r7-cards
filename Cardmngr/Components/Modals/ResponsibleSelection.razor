@inject IProjectApi ProjectApi

@if (Responsible is { })
{
    @if (EditMode)
    {
        <a class="clickable" @onclick="ShowResponsibleSelectionModal">
            <UserAvatar User="Responsible" ShowTooltip="true" />
        </a>
    }
    else
    {
        <UserAvatar User="Responsible" ShowTooltip="true" />
    }
}
else
{
    @if (EditMode)
    {
        <a class="text-secondary fw-light clickable" @onclick="ShowResponsibleSelectionModal" style="font-size: small;">
            <i>Без ответственного</i>
        </a>
    }
    else
    {
        <i class="text-secondary fw-light" style="font-size: small;">Без ответственного</i>
    }
}

@code {

    [CascadingParameter(Name = "MiddleModal")] ModalOptions ModalOptions { get; set; } = null!;

    [CascadingParameter] IModalService Modal { get; set; } = default!;

    [Parameter]
    public Onlyoffice.Api.Models.Responsible? Responsible { get; set; }

    [Parameter]
    public EventCallback<Onlyoffice.Api.Models.Responsible> ResponsibleChanged { get; set; }

    [Parameter]
    public bool EditMode { get; set; }

    [Parameter]
    public Onlyoffice.Api.Models.Task Task { get; set; } = null!;

    private async Task ShowResponsibleSelectionModal()
    {
        var parameters = new ModalParameters
        {
            { "Items", await GetProjectTeamResponsiblesAsync() },
            { "ItemRender", RenderResponsible }
        };

        var result = await Modal.Show<SelectionModal<Onlyoffice.Api.Models.Responsible>>("Выберите ответственного", parameters, ModalOptions).Result;

        if (result.Confirmed)
        {
            await ResponsibleChanged.InvokeAsync((Onlyoffice.Api.Models.Responsible)result.Data!);
        }
    }

    private async Task<List<Onlyoffice.Api.Models.Responsible>> GetProjectTeamResponsiblesAsync()
    {   
        var team = await ProjectApi.GetProjectTeamAsync(Task.ProjectOwner!.Id);
        return team
            .Select(x => new Onlyoffice.Api.Models.Responsible
            {
                Id = x.Id,
                AvatarSmall = x.AvatarSmall,
                DisplayName = x.DisplayName,
                ProfileUrl = x.ProfileUrl
            })
            .ToList();
    }

    private static RenderFragment<Onlyoffice.Api.Models.Responsible> RenderResponsible = responsible =>
        @<div class="d-flex flex-row py-2 align-items-center">
            <div class="ms-1">
            <UserAvatar User="responsible"/>
            </div>
            <span class="ms-2">
                @responsible.DisplayName
            </span>
        </div>;
}