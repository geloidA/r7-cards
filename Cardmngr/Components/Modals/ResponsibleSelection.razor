@inject IProjectApi ProjectApi
@inject ResponsibleSelectionDialog SelectionDialog

@if (Responsible is { })
{
    @if (EditMode)
    {
        <a class="clickable" @onclick="ShowResponsibleSelectionModal">
            <UserAvatar User="Responsible" ShowTooltip="true" />
        </a>
    }
    else
    {
        <UserAvatar User="Responsible" ShowTooltip="true" />
    }
}
else
{
    @if (EditMode)
    {
        <a class="text-secondary fw-light clickable" @onclick="ShowResponsibleSelectionModal" style="font-size: small;">
            <i>Без ответственного</i>
        </a>
    }
    else
    {
        <i class="text-secondary fw-light" style="font-size: small;">Без ответственного</i>
    }
}

@code {

    [CascadingParameter(Name = "MiddleModal")] ModalOptions ModalOptions { get; set; } = null!;

    [CascadingParameter] IModalService Modal { get; set; } = default!;

    [Parameter]
    public Onlyoffice.Api.Models.Responsible? Responsible { get; set; }

    [Parameter]
    public EventCallback<Onlyoffice.Api.Models.Responsible> ResponsibleChanged { get; set; }

    [Parameter]
    public bool EditMode { get; set; }

    [Parameter]
    public Onlyoffice.Api.Models.Task Task { get; set; } = null!;

    private async Task ShowResponsibleSelectionModal()
    {
        var selected = await SelectionDialog.ShowAsync(Task.ProjectOwner!.Id, ModalOptions);

        if (selected is { })
        {
            await ResponsibleChanged.InvokeAsync(selected);
        }
    }
}