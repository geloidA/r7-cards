@using Milestone = Onlyoffice.Api.Models.Milestone

@inject IProjectApi ProjectApi

@if (ProjectModel is { })
{
    <Cardmngr.Components.Modals.MyBlazored.Offcanvas Placement="MyOffcanvasPlacement.End" Class="my-offcanvas my-offcanvas-right">
        <OffcanvasHeader Class="py-1 d-flex flex-column" Style="padding-top: 20px !important;">
            <div class="d-flex flex-row align-self-start mb-2">
                <span>@ProjectModel.Title</span>
                <Tooltip Title="Кол-во открытых задач">
                    <Badge class="p-1 ms-1 user-select-none" Color="BadgeColor.Info">
                        @ProjectModel.TaskCount
                    </Badge>
                </Tooltip>
                @if (ProjectModel.IsPrivate)
                {
                    <div class="ms-1">
                        <Tool IconName="IconName.LockFill" IconColor="IconColor.Warning" TooltipTitle="Приватный проект" />
                    </div>
                }
            </div>            
            <div class="w-100 header"></div>
        </OffcanvasHeader>
        <div class="row mt-2 align-items-center px-3">
            <div class="col">
                <i class="text-secondary fw-light" style="font-size: 13px;">
                    Создан - @ProjectModel.Created.ToShortDateString()
                </i>
            </div>
            <div class="col d-flex justify-content-end">                
                @RenderStatus(GetDataByStatus(ProjectModel.Status))
            </div>
        </div>
        <OffcanvasBody Class="d-flex flex-column px-3">
            <WorkContainerDateProgress Work="ProjectModel" />
            <span class="mt-3">@ProjectModel.Description</span>
            <div class="px-2">
                <Card class="row mt-4 p-1 bg-shadow">
                    <CardTitle class="mt-2">
                        <div class="row">
                            <div class="col-md-10">
                                <h6>
                                    <Icon Name="IconName.Stars" />
                                    Вехи
                                    <Badge class="p-1" Color="BadgeColor.Info">@ProjectModel.Milestones.Count</Badge>
                                </h6>
                            </div>
                            <div class="col-md-2">                                
                                <Tool Class="d-flex justify-content-center ms-2" Disabled="!ProjectModel.CanEdit"
                                    IconName="IconName.Plus" OnClick="ShowMilestoneCreation" TooltipTitle="Добавить веху" />
                            </div>
                        </div>
                    </CardTitle>
                    <CardBody class="m-0 user-select-none" style="max-height: 190px; overflow: auto;">
                        <MilestoneList ShowMilestoneModal="true" ShowTaskCounts="true" Milestones="ProjectModel.Milestones" />
                    </CardBody>
                </Card>
                <Card class="row mt-4 p-1 bg-shadow">
                    <CardTitle class="mt-2">
                        <h6>
                            <Icon Name="IconName.PeopleFill" />
                            Команда 
                            <Badge class="p-1" Color="BadgeColor.Info">@ProjectModel.TeamCount</Badge>
                        </h6>
                    </CardTitle>
                    <CardBody class="m-0" style="max-height: 255px; overflow: auto;">
                        <UserList Users="ProjectModel.Team" />
                    </CardBody>
                </Card>
            </div>
            <div class="mt-4 d-flex align-items-center ">
                <h6 class="col mt-1">
                    <Icon Name="IconName.PersonFill" />
                    Менеджер проекта
                </h6>
                <UserBadge User="ProjectModel.Responsible" />
            </div>
        </OffcanvasBody>
    </Cardmngr.Components.Modals.MyBlazored.Offcanvas>
}

@code {

    [Parameter] public ProjectModel ProjectModel { get; set; } = null!;

    [CascadingParameter(Name = "DetailsModal")] ModalOptions Options { get; set; } = null!;
    [CascadingParameter] IModalService Modal { get; set; } = null!;

    private async Task ShowMilestoneCreation()
    {
        var parameters = new ModalParameters
        {
            { "Model", new MilestoneModel(new Milestone { CanEdit = true, CanDelete = true }, ProjectModel) },
            { "IsCreation", true }
        };

        await Modal.Show<MilestoneDetailsModal>("", parameters, Options).Result;
    }

    private static StatusData GetDataByStatus(ProjectStatus status)
    {
        return status switch
        {
            ProjectStatus.Paused => StatusData.Paused,
            ProjectStatus.Open => StatusData.Open,
            ProjectStatus.Closed => StatusData.Closed,
            _ => throw new NotImplementedException("Unknown ProjectStatus type")
        };
    }

    private static RenderFragment<StatusData> RenderStatus => data =>
        @<Badge Color="data.BadgeColor" class="user-select-none">
            <div class="d-flex align-items-center" >
                <span style="font-size: small;">@data.Title</span>
                <Icon class="ms-1 d-flex" Name="data.IconName" />
            </div>
        </Badge>;

    private class StatusData(BadgeColor badgeColor, IconName iconName, string title)
    {
        public BadgeColor BadgeColor => badgeColor;
        public IconName IconName => iconName;
        public string Title => title;

        public static StatusData Open => new(BadgeColor.Primary, IconName.ForwardFill, "Открыт");
        public static StatusData Closed => new(BadgeColor.Success, IconName.CheckCircleFill, "Закрыт");
        public static StatusData Paused => new(BadgeColor.Secondary, IconName.PauseCircleFill, "Приостановлен");
    }
}
