@inject IProjectApi ProjectApi

@inherits ModelFormComponent<TaskModel, Onlyoffice.Api.Models.Task>

@using Offcanvas = Cardmngr.Components.Modals.MyBlazored.Offcanvas

@if (changingState is { })
{
    <Cardmngr.Components.Modals.MyBlazored.Offcanvas Placement="MyOffcanvasPlacement.End" Class="my-offcanvas my-offcanvas-right" @ref="currentModal">
        <EditForm Model="changingState" OnValidSubmit="Submit" OnInvalidSubmit="NotifyInvalidInput">
            <DataAnnotationsValidator/>
            <OffcanvasHeader Class="py-0" Style="padding-top: 20px !important;">
                <TitleChanger @bind-Title="changingState.Title" Disabled="!Model.CanEdit" />
            </OffcanvasHeader>
            <ValidationMessage For="() => changingState.Title" class="ms-3 validation-msg" />
            <OffcanvasBody Class="d-flex flex-column form-group">
                <TaskPriorityChanger Task="changingState" />
                <Card class="p-1 mt-2">
                    <DateChanger Title="Дата начала:" Disabled="!Model.CanEdit" 
                        EmptyText="Не установлен" @bind-Date="changingState.StartDate" />
                </Card>
                <Card class="p-1 mt-2">
                    <DateChanger Title="Крайний срок" InputId="Deadline" Disabled="!Model.CanEdit" 
                        EmptyText="Не установлен" @bind-Date="changingState.Deadline" />
                    <ValidationMessage For="() => changingState.Deadline" class="validation-msg" />
                </Card>
                <div class="pt-2">
                    <DescriptionChanger @bind-Description="changingState.Description" Disabled="!Model.CanEdit" />
                </div>
                <div class="pb-2 pt-2">                 
                    <TaskResponsibles Task="changingState" />
                </div>
                <div class="pb-2">
                    <TaskMilestone Task="changingState" />
                </div>
                @if (!IsCreation)
                {
                    <TaskSubtasks Task="changingState" />
                }
                <div class="row pt-2 d-flex justify-content-end">
                    <div class="d-flex flex-row">
                        <Button Loading="submiting" LoadingText="@LoadingText" Type="ButtonType.Submit" Size="Size.Small" Color="ButtonColor.Success" Outline="true"
                            Disabled="!Model.CanEdit" >
                            @SubmitText
                        </Button>
                        @if(!IsCreation)
                        {
                            <Button class="ms-2" Size="Size.Small" Color="ButtonColor.Danger" Outline="true"
                                Disabled="!Model.CanDelete" 
                                @onclick=@(async () => await DeleteAsync(true, "Действие необратимо. Вы действительно хотите удалить задачу?")) >
                                Удалить
                            </Button>
                        }
                    </div>
                </div>
            </OffcanvasBody>
        </EditForm>
    </Cardmngr.Components.Modals.MyBlazored.Offcanvas>
}

@code {
    private Offcanvas currentModal = null!;

    protected override Task<Onlyoffice.Api.Models.Task> OnCreateAsync()
    {
        return ProjectApi.CreateTaskAsync(Model.Project.Id, changingState.GetUpdateState(), 
            Model.StatusColumn.Status, 
            Model.StatusColumn.Id);
    }

    protected override Task<Onlyoffice.Api.Models.Task> OnUpdateAsync()
        => ProjectApi.UpdateTaskAsync(Model.Id, changingState.GetUpdateState());

    protected override async Task OnDeleteAsync()
    {
        await ProjectApi.DeleteTaskAsync(Model.Id);
        Model.StatusColumn.Remove(Model);
    }

    protected override void HookCreateSubmit(TaskModel updatedModel)
        => Model.StatusColumn.Add(updatedModel);

    protected override Task CloseAsync() => currentModal.CloseAsync();
}