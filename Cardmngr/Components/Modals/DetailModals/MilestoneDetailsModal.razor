@inject TeamMemberSelectionDialog SelectionDialog
@inject IProjectApi ProjectApi

@inherits ValidationComponent

@using Offcanvas = Cardmngr.Components.Modals.MyBlazored.Offcanvas;

@if (changingState is { })
{
    <Cardmngr.Components.Modals.MyBlazored.Offcanvas Placement="MyOffcanvasPlacement.End" Class="my-offcanvas my-offcanvas-right" @ref="currentModal">
        <EditForm Model="changingState" OnValidSubmit="Save" OnInvalidSubmit="NotifyInvalidInput" >
            <DataAnnotationsValidator/>
            <OffcanvasHeader Class="py-0" Style="padding-top: 20px !important;">
                <TitleChanger Disabled="!Milestone.CanEdit" @bind-Title="changingState.Title" />
            </OffcanvasHeader>
            <ValidationMessage For="() => changingState.Title" class="ms-3 validation-msg" />
            <OffcanvasBody Class="d-flex flex-column">
                <div class="mb-2" >
                    <WorkContainerDateProgress Work="changingState" />
                </div>
                <div class="d-flex justify-content-end">
                    <UserBadge User="changingState.Responsible"Title="Ответственный" OnClick="ShowResponsibleSelectionDialog" />
                </div>
                <Card class="p-1 mt-3">
                    <DateChanger Title="Крайний срок:" InputId="Deadline" Disabled="!Milestone.CanEdit" EmptyText="Не установлен" @bind-Date="changingState.Deadline" />
                    <ValidationMessage For="() => changingState.Deadline" class="validation-msg" />
                </Card>
                <DescriptionChanger Disabled="!Milestone.CanEdit" Class="mt-2" @bind-Description="changingState.Description" />
                <div class="mt-4">
                    <MelistoneShortTasks Milestone="Milestone" />
                </div>
                <div class="d-flex mt-2 flex-row">
                    <Button Loading="saving" Size="Size.Small" Disabled="!Milestone.CanEdit" Type="ButtonType.Submit" 
                        Color="ButtonColor.Success" Outline="true" >
                        Сохранить
                    </Button>
                    <Button class="ms-2" Size="Size.Small" Disabled="!Milestone.CanDelete" Color="ButtonColor.Danger" @onclick="Delete" 
                        Outline="true" >
                        Удалить
                    </Button>
                </div>
            </OffcanvasBody>
        </EditForm>
    </Cardmngr.Components.Modals.MyBlazored.Offcanvas>
}

@code {
    private bool saving;
    private MilestoneModel changingState = null!;
    private Offcanvas currentModal = null!;

    [CascadingParameter(Name = "MiddleModal")] ModalOptions ModalOptions { get; set; } = null!;
    [CascadingParameter] IModalService Modal { get; set; } = null!;

    [Parameter] public MilestoneModel Milestone { get; set; } = null!;

    protected override void OnInitialized()
    {
        changingState = Milestone.Clone();
    }

    private async Task ShowResponsibleSelectionDialog()
    {
        if (!Milestone.CanDelete) return;
        var selected = await SelectionDialog.ShowAsync(Milestone.Project.Team, ModalOptions);

        if (selected is { })
        {
            changingState.Responsible = selected;
        }
    }

    private async Task Save()
    {
        saving = true;

        var milestone = await ProjectApi.UpdateMilestoneAsync(Milestone.Id, changingState.GetUpdatedState());
        Milestone.Update(milestone);

        await currentModal.CloseAsync(ModalResult.Ok());
    }

    private async Task Delete()
    {
        var parameters = new ModalParameters
        {
            { "AdditionalText", "Действие необратимо. Вы действительно хотите удалить веху?"}
        };

        var result = await Modal.Show<DefaultConfirmModal>("Удаление", parameters, ModalOptions).Result;

        if (result.Confirmed)
        {
            await ProjectApi.DeleteMilestoneAsync(Milestone.Id);
            Milestone.Project.DeleteMilestone(Milestone);
            
            await currentModal.CloseAsync(ModalResult.Ok());
        }        
    }
}