@inject IProjectApi ProjectApi

@using Offcanvas = Cardmngr.Components.Modals.MyBlazored.Offcanvas

@if (changingState is { })
{
    <Cardmngr.Components.Modals.MyBlazored.Offcanvas Placement="MyOffcanvasPlacement.End" Class="my-offcanvas my-offcanvas-right" @ref="currentModal">
        <OffcanvasHeader>
            <TitleChanger @bind-Title="changingState.Title" Disabled="!IsCanEdit" />
        </OffcanvasHeader>
        <OffcanvasBody Class="d-flex flex-column">
            <CardInfoHeader Task="changingState" Disabled="!IsCanEdit" />
            <div class="pt-2">
                <DescriptionChanger @bind-Description="changingState.Description" Disabled="!IsCanEdit" />
            </div>
            <div class="pb-2 pt-2">                 
                <CardResponsibles Task="changingState" Disabled="!IsCanEdit" />
            </div>
            <div class="pb-2">
                <CardMilestone Task="changingState" Disabled="!IsCanEdit" />
            </div>
            <CardSubtasks Task="changingState" Disabled="!IsCanEdit" />
            <div class="row pt-2 d-flex justify-content-end">
                <div class="d-flex flex-row">
                    <Button Loading="saveLoading" Color="ButtonColor.Success" Outline="true" @onclick="ConfirmSaving"
                        Disabled="!IsCanEdit" >
                        Сохранить
                    </Button>
                    <Button class="ms-2" @onclick="ShowDeleteConfirmModal" Color="ButtonColor.Danger" Outline="true"
                        Disabled="!IsCanEdit" >
                        Удалить
                    </Button>
                </div>
            </div>
        </OffcanvasBody>
    </Cardmngr.Components.Modals.MyBlazored.Offcanvas>
}

@code {
    private bool saveLoading;
    private Offcanvas currentModal = null!;
    private TaskModel? changingState;

    [CascadingParameter(Name = "MiddleModal")] ModalOptions ModalOptions { get; set; } = null!;
    [CascadingParameter] IModalService Modal { get; set; } = default!;

    [Parameter] public TaskModel Task { get; set; } = null!;
    [Parameter] public bool IsCanEdit { get; set; }

    protected override void OnInitialized()
    {
        changingState = Task.Clone(false);
    }

    private async Task ConfirmSaving()
    {
        saveLoading = true;

        var updatedTask = await ProjectApi.UpdateTaskAsync(changingState!.Id, changingState.GetUpdateState());
        Task.Update(updatedTask);

        await currentModal.CloseAsync(ModalResult.Ok());
    }

    private async Task ShowDeleteConfirmModal()
    {
        var result = await Modal.Show<DefaultConfirmModal>("Удалить?", ModalOptions).Result;

        if (result.Confirmed)
        {
            await ProjectApi.DeleteTaskAsync(Task.Id);
            Task.StatusColumn.Remove(Task);

            await currentModal.CloseAsync(ModalResult.Ok());
        }
    }
}