@using Onlyoffice.Api.Models

@inject IProjectApi ProjectApi

@if (Responsibles is { })
{
    <Card>
        <CardBody style="max-height: 250px; overflow-y: scroll;">
            @foreach (var responsible in Responsibles)
            {
                @if (Multiple)
                {
                    <div @key="responsible" class="d-flex flex-row py-2 align-items-center">
                        <InputCheckbox @bind-Value="responsible.Checked" />
                        <div class="ms-1">
                            <ResponsibleAvatar Responsible="responsible.Value"/>
                        </div>
                        <span class="ms-2">
                            @responsible.Value.DisplayName
                        </span>
                    </div>
                }
                else
                {
                    <div @key="responsible" @onclick="responsible.Action" class="d-flex flex-row py-2 align-items-center"
                        style="cursor: pointer;">
                        <div class="ms-1">
                            <ResponsibleAvatar Responsible="responsible.Value"/>
                        </div>
                        <span class="ms-2">
                            @responsible.Value.DisplayName
                        </span>
                    </div>
                }
            }
        </CardBody>
    </Card>

    if (Multiple)
    {
        <div class="row mt-4">
            <div class="col d-flex justify-content-center">
                <Button Color="ButtonColor.Success" @onclick="Confirm" >ОК</Button>
            </div>
            <div class="col d-flex justify-content-center">
                <Button Color="ButtonColor.Secondary" @onclick="Cancel">Отмена</Button>
            </div>
        </div>
    }
}
else
{
    <span>Загрузка</span>
}

@code {
    [CascadingParameter] BlazoredModalInstance Modal { get; set; } = default!;
    List<SelectionResponsible>? Responsibles;

    [Parameter] public List<string>? SelectedIds { get; set; }
    [Parameter] public bool Multiple { get; set; } = true;
    [Parameter] public int ProjectId { get; set; }

    protected override async System.Threading.Tasks.Task OnInitializedAsync()
    {
        var team = await ProjectApi.GetProjectTeam(ProjectId);
        Responsibles = team
            .Select(CreateSelectionResponsible)
            .ToList();
    }

    private SelectionResponsible CreateSelectionResponsible(UserProfile profile)
    {
        return new SelectionResponsible(SelectedIds?.Contains(profile.Id!) ?? false, new Responsible
        {
            Id = profile.Id,
            AvatarSmall = profile.AvatarSmall,
            DisplayName = profile.DisplayName,
            ProfileUrl = profile.ProfileUrl
        }, 
        async () => await ConfirmSingle(profile.Id!));
    }

    private async System.Threading.Tasks.Task Confirm()
    {
        var selected = Responsibles!
            .Where(x => x.Checked)
            .Select(x => x.Value)
            .ToList();
        
        await Modal.CloseAsync(ModalResult.Ok(selected));
    }

    private async System.Threading.Tasks.Task ConfirmSingle(string selectedId)
    {
        var selected = Responsibles!.First(x => x.Value.Id == selectedId);
        await Modal.CloseAsync(ModalResult.Ok(selected.Value));
    }

    private async System.Threading.Tasks.Task Cancel() => await Modal.CancelAsync();

    private class SelectionResponsible(bool isChecked, Responsible value, Action action)
    {
        public bool Checked { get; set; } = isChecked;
        public Responsible Value = value;
        public Action Action { get; set; } = action;
    }
}
