@using Modals

@inject IProjectApi ProjectApi

@implements IDisposable

<div class="@BoardColumn.CssName @CssDragOver" @ondrop="OnDrop"
    @ondragover:preventDefault @ondragenter:preventDefault
    @ondragover="@(() => { if (!highlighted) highlighted = true; })"
    @ondragleave="() => highlighted = false" >
    <div class="row mb-2 d-flex align-items-center">
        <div class="col">
            <Badge Color="BadgeColor.Success">@BoardColumn.Count</Badge>
            <span class="ms-1 font-monospace">@BoardColumn.Title</span>
        </div>
        <div class="col-2 hidden d-flex flex-row align-items-center" style="font-size: small !important;">
            <Dropdown Size="Size.ExtraSmall" AutoClose="true" >
                <DropdownToggleButton Color="ButtonColor.Light">
                    <Icon Name="IconName.ThreeDots" />
                </DropdownToggleButton>
            </Dropdown>
        </div>
    </div>
    <ul class="card-container">
        @foreach (var card in BoardColumn)
        {
            <CardView Card="card" @key="card" />
        }
    </ul>
</div>

@code {
    string CssDragOver => highlighted ? "dragover" : "";
    bool highlighted;

    [CascadingParameter] BlazorCards.Card? LastDraggedCard { get; set; }
    [Parameter] public BoardColumn BoardColumn { get; set; } = null!;
    [Parameter] public EventCallback<BlazorCards.Card> NewCardCreated { get; set; }

    protected override void OnInitialized()
    {
        BoardColumn.CssName = "board-column";
        BoardColumn.CollectionChanged += Refresh;
    }

    async Task OnDrop()
    {
        highlighted = false;
        if (LastDraggedCard is { })
        {
            LastDraggedCard.Column!.Remove(LastDraggedCard);
            BoardColumn.Add(LastDraggedCard);
            await UpdateCardStatus(LastDraggedCard);
        }
    }

    private async Task UpdateCardStatus(BlazorCards.Card card)
    {
        var taskStatus = BoardColumn.GetTaskStatus();
        var task = card.GetTask();

        if (taskStatus.StatusType != task.Status || taskStatus.Id != task.CustomTaskStatus)
        {
            await ProjectApi.UpdateTaskStatusAsync(task.Id, (Status)taskStatus.StatusType, taskStatus.Id);
            task.Status = taskStatus.StatusType;
            task.CustomTaskStatus = taskStatus.IsDefault ? null : taskStatus.Id;
        }
    }

    private void Refresh() => StateHasChanged();
    private void Refresh(System.Collections.Specialized.NotifyCollectionChangedEventArgs e) => StateHasChanged();

    public void Dispose()
    {
        BoardColumn.CollectionChanged -= Refresh;
    }
}
