@using TypeStatus = Onlyoffice.Api.Models.TaskStatus

@inject IProjectApi ProjectApi
@inject CardDropService CardDropService

@implements IDisposable

<div class="@BoardColumn.CssName @CssDragOver @CssCollapsed user-select-none" @ondrop="OnDrop"
    @ondragover:preventDefault @ondragenter:preventDefault @ondblclick="() => isCollapsed = !isCollapsed"
    @ondragover="@(() => { if (!highlighted) highlighted = true; })"
    @ondragleave="() => highlighted = false">
    @if (isCollapsed)
    {
        <div class="d-flex flex-column mt-1">            
            <Badge class="align-self-center" Color="BadgeColor.Success">@BoardColumn.Count</Badge>
            <span class="mt-2 font-monospace text-vertical ">
                @BoardColumn.Title
            </span>
            <div class="mt-2 align-self-center" >
                <img src=@($"data:{TypeStatus.ImageType};base64, {TypeStatus.Image}")
                    style="max-width: 18px;">
            </div>
        </div>
    }
    else
    {
        <div class="row mb-2 ">
            <div class="col-md-10 align-self-baseline" >
                <div class="row">
                    <div class="col-md-10">
                        <Badge Color="BadgeColor.Success">@BoardColumn.Count</Badge>
                        <span class="ms-1 font-monospace user-select-none">
                            @BoardColumn.Title
                        </span>
                        <img src=@($"data:{TypeStatus.ImageType};base64, {TypeStatus.Image}")
                                style="max-width: 18px;" alt="SVG Icon">                        
                    </div>
                </div>
            </div>
            <div class="col-md-2 hidden">
                @DropDown
            </div>
        </div>
        @if (BoardView.SelectedMilestone is { })
        {
            <div class="mb-1 d-flex justify-content-center fw-light" style="font-size: small;">
                @BoardColumn.Where(FilterByMilestone).Count() результатов
            </div>
        }
        <ul class="card-container">
            @foreach (var card in BoardColumn.Where(FilterByMilestone))
            {
                <CardView Card="card" @key="card" />
            }
        </ul>
    }
</div>

@code {
    string CssDragOver => highlighted ? "dragover" : "";
    string CssCollapsed => isCollapsed ? "collapsed" : "";
    bool highlighted;
    bool isCollapsed;

    [CascadingParameter] IModalService Modal { get; set; } = default!;
    [CascadingParameter] BlazorCards.Card? LastDraggedCard { get; set; }
    [CascadingParameter] BoardView BoardView { get; set; } = null!;
    [Parameter] public BoardColumn BoardColumn { get; set; } = null!;
    [Parameter] public EventCallback<BlazorCards.Card> NewCardCreated { get; set; }

    private TypeStatus TypeStatus => BoardColumn.GetTaskStatus();

    protected override void OnInitialized()
    {
        BoardColumn.CssName = "board-column";
        BoardColumn.CollectionChanged += Refresh;
        BoardView.SelectedMilestoneChanged += Refresh;
    }

    private async Task OnDrop()
    {
        highlighted = false;
        if (LastDraggedCard is { })
        {
            if (await CardDropService.Drop(LastDraggedCard, BoardColumn))
            {
                BoardColumn.Add(LastDraggedCard);
            }            
        }
    }
    
    private async Task ShowCreateCardModal()
    {
        var options = new ModalOptions { Position = ModalPosition.Middle };
        var res = await Modal.Show<CardCreationModal>("Сформулируйте задачу 🤔💭", options).Result;

        if (res.Confirmed)
        {
            var cardName = res.Data!.ToString()!;
            var card = new BlazorCards.Card(cardName);
            
            var task = await ProjectApi.CreateTaskAsync(BoardColumn.Board!.GetProject().Id, 
                cardName, 
                (Status)TypeStatus.StatusType, 
                TypeStatus.Id);

            card.Data = task;
            BoardColumn.Add(card);
            await NewCardCreated.InvokeAsync(card);
        }
    }

    private bool FilterByMilestone(BlazorCards.Card card)
    {
        return BoardView.SelectedMilestone == null ||
            card.GetTask().MilestoneId == BoardView.SelectedMilestone.Id;
    }

    private void Refresh() => StateHasChanged();
    private void Refresh(System.Collections.Specialized.NotifyCollectionChangedEventArgs e) => StateHasChanged();

    private RenderFragment DropDown => 
        @<Dropdown Size="Size.ExtraSmall" AutoClose="true" >
            <DropdownToggleButton Color="ButtonColor.Light">
                <Icon Name="IconName.ThreeDots" />
            </DropdownToggleButton>
            <DropdownMenu>
                <DropdownItem @onclick="ShowCreateCardModal"
                    >Добавить карточку</DropdownItem>
            </DropdownMenu>
        </Dropdown>;

    public void Dispose()
    {
        BoardColumn.CollectionChanged -= Refresh;
        BoardView.SelectedMilestoneChanged -= Refresh;
    }
}