
@if (Board is { })
{
    <div class="d-flex position-relative overflow-hidden pb-2 flex-row @Board.CssName" >
        <CascadingValue Value="lastDraggingCard">
            <CascadingValue Value="this" IsFixed="true" >
                <div class="d-flex flex-row" style="flex: auto !important; width: 100% !important;">
                    @foreach (var column in Board)
                    {
                        <BoardColumnView BoardColumn="column" @key="column" NewCardCreated="SubscribeDragHandler" />
                    }
                </div>
            </CascadingValue>
        </CascadingValue>
    </div>
}

@code {
    private readonly HashSet<Onlyoffice.Api.Models.Milestone> selectedMilestones = [];
    
    BlazorCards.Card? lastDraggingCard;

    [Parameter] public Board? Board { get; set; }
    [Parameter] public EventCallback OnCreatedCard { get; set; }

    protected override void OnInitialized()
    {
        if (Board is { })
        {
            InitializeEventHandlers(Board);
        }
    }
    public event Action? SelectedMilestonesChanged;

    public void ToggleMilestone(Onlyoffice.Api.Models.Milestone milestone)
    {
        if (selectedMilestones.Contains(milestone))
        {
            selectedMilestones.Remove(milestone);
        }
        else
        {
            selectedMilestones.Add(milestone);
        }
        
        SelectedMilestonesChanged?.Invoke();
    }
    public bool HaveSelectedMilestones => selectedMilestones.Any();
    public IEnumerable<Onlyoffice.Api.Models.Milestone> SelectedMilestones
    {
        get 
        {
            foreach (var milestone in selectedMilestones)
            {
                yield return milestone;
            }
        }
    }

    public void InitializeEventHandlers(Board value)
    {
        foreach (var card in value.AllCards())
            card.DragStart += UpdateDraggingCard;
    }

    private void SubscribeDragHandler(BlazorCards.Card created)
    {
        created.DragStart += UpdateDraggingCard;
        created.LayoutChanged += async () => await CreateCardEventHandler();
    }

    private async Task CreateCardEventHandler()
    {
        if (OnCreatedCard.HasDelegate)
        {
            await OnCreatedCard.InvokeAsync();
        }
    }
    
    private void UpdateDraggingCard(BlazorCards.Card card)
    {
        lastDraggingCard = card;
        InvokeAsync(StateHasChanged);
        Console.WriteLine($"LastDraggingCard changed on {card.Title}");
    }

    private void Refresh() => StateHasChanged();

    public override string ToString()
    {
        return $"BoardView - {Board}";
    }
}
