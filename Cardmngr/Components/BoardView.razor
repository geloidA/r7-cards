
@if (Board is { })
{
    <div class="d-flex position-relative overflow-hidden p-sm-3 flex-row @Board.CssName" >
        <CascadingValue Value="lastDraggingCard">
            <CascadingValue Value="cardDetailsModalOptions" IsFixed="true" >
                <CascadingValue Value="this" IsFixed="true" >
                    <div class="d-flex flex-row" style="flex: auto !important; width: 100% !important;">
                        @foreach (var column in Board)
                        {
                            <BoardColumnView BoardColumn="column" @key="column" NewCardCreated="SubscribeDragHandler" />
                        }
                    </div>
                </CascadingValue>
            </CascadingValue>
        </CascadingValue>
    </div>
}

@code {

    private readonly ModalOptions cardDetailsModalOptions = new()
    {
        Size = Blazored.Modal.ModalSize.ExtraLarge,
        DisableBackgroundCancel = true
    };
    
    BlazorCards.Card? lastDraggingCard;

    [Parameter] public Board? Board { get; set; }

    protected override void OnInitialized()
    {
        if (Board is { })
        {
            InitializeEventHandlers(Board);
        }
    }

    public event Action? SelectedMilestoneChanged;

    private Onlyoffice.Api.Models.Milestone? selectedMilestone;
    public Onlyoffice.Api.Models.Milestone? SelectedMilestone
    {
        get => selectedMilestone;
        set
        {
            selectedMilestone = value;
            SelectedMilestoneChanged?.Invoke();
        }
    }

    public void InitializeEventHandlers(Board value)
    {
        foreach (var card in value.AllCards())
            card.DragStart += UpdateDraggingCard;
    }

    private void SubscribeDragHandler(BlazorCards.Card createdCard)
    {
        createdCard.DragStart += UpdateDraggingCard;
    }
    
    private void UpdateDraggingCard(BlazorCards.Card card)
    {
        lastDraggingCard = card;
        InvokeAsync(StateHasChanged);
        Console.WriteLine($"LastDraggingCard changed on {card.Title}");
    }

    private void Refresh() => StateHasChanged();

    public override string ToString()
    {
        return $"BoardView - {Board}";
    }
}
