@using Modals

@implements IDisposable

<div class="h-100">
    <div class="row py-2 font-monospace fw-bold">
        <span class="ms-2">@Board.Title</span>
    </div>
    <div class="row" style="overflow-x: scroll; height: 95%" >
        <div class="d-flex flex-row @Board.CssName pb-sm-2" >
            <CascadingValue Value="Board" IsFixed="true">
                <CascadingValue Value="lastDraggingCard">
                    <CascadingValue Value="cardDetailsModalOptions">
                        @foreach (var column in Board)
                        {
                            <BoardColumnView BoardColumn="column" @key="column" NewCardCreated="SubscribeDragHandler" />
                        }
                    </CascadingValue>
                </CascadingValue>
            </CascadingValue>
        </div>
    </div>
</div>

@code {
    private readonly ModalOptions cardDetailsModalOptions = new()
    {
        Size = Blazored.Modal.ModalSize.ExtraLarge,
        DisableBackgroundCancel = true
    };

    @* BoardColumn? lastDraggingColumn; *@
    BlazorCards.Card? lastDraggingCard;

    [Parameter] public Board Board { get; set; } = null!;

    private DotNetObjectReference<BoardView>? thisRef;

    protected override void OnInitialized()
    {
        Board.CssName = "board";
        Board.PosChanged += Refresh;
        Board.LayoutChanged += Refresh;
        thisRef = DotNetObjectReference.Create(this);

        foreach (var card in Board.AllCards())
            card.DragStart += UpdateDraggingCard;
    }

    private void SubscribeDragHandler(BlazorCards.Card createdCard)
    {
        createdCard.DragStart += UpdateDraggingCard;
    }
    
    private void UpdateDraggingCard(BlazorCards.Card card)
    {
        lastDraggingCard = card;
        InvokeAsync(StateHasChanged);
        Console.WriteLine($"LastDraggingCard changed on {card.Title}");
    }

    public void Dispose()
    {
        Board.PosChanged -= Refresh;
        Board.LayoutChanged -= Refresh;
        thisRef?.Dispose();

        foreach (var card in Board.AllCards())
            card.DragStart -= UpdateDraggingCard;
    }

    private void Refresh() => StateHasChanged();
}
