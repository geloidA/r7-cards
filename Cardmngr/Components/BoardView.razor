@using Modals
@using Vector2 = BlazorCards.Vector2;

@inject DragModule DragModule
@inject IProjectApi ProjectApi

@implements IDisposable

<div style="transform: @CssTransform; ">
    <Card Class="@Board.CssName"
        @onmousedown:stopPropagation
        >
        <div style="background-color: @Board.CssColor; border-radius: 4px;" class="flex-row vertical-align-middle" >
            <div class="row">
                <div class="col">
                    <Icon class="grabbing" Name="IconName.ArrowsMove" style="margin-left: 2px;" @onmousedown="OnMouseDown" />
                    <span class="ms-2">@Board.Title</span>
                    <Icon class="highlight" Name="IconName.PencilFill" Size="IconSize.x6" style="margin-left: 2px;" />
                </div>
                <div class="col d-flex justify-content-end">
                    <span>
                        @if (Board.IsCollapsed)
                        {
                            <Badge class="" Color="BadgeColor.Success">@Board.Sum(x => x.Count) карточек</Badge>
                            <Icon class="highlight" Name="IconName.ChevronUp" @onclick=ToggleCollapsed />
                        }
                        else
                        {
                            <Icon Name="IconName.Plus" @onclick="ShowCardModal" Color="IconColor.Success" Size="IconSize.x4" class="highlight" />
                            <Icon class="highlight" Name="IconName.ChevronDown" @onclick=ToggleCollapsed />
                        }
                    </span>
                </div>
            </div>                        
        </div>
        <div> @*column bars*@
            @if (!Board.IsCollapsed)
            {
                <div class="d-flex flex-row" >
                    <CascadingValue Value="Board" IsFixed="true">
                        @foreach (var column in Board)
                        {
                            <BoardColumnView BoardColumn="column" @key="column" NewCardCreated="NewCardCreated" />
                        }
                    </CascadingValue>
                </div>
            }
        </div>
    </Card>
</div>

@code {
    [CascadingParameter] public IModalService Modal { get; set; } = default!;
    [Parameter] public Board Board { get; set; } = null!;
    [Parameter] public EventCallback<BlazorCards.Card> NewCardCreated { get; set; }

    string CssTransform => FormattableString.Invariant($"translate({(long)Board.Pos.X}px, {(long)Board.Pos.Y}px)");

    private DotNetObjectReference<BoardView>? thisRef;
    private Vector2 lastCursorPos;

    protected override void OnInitialized()
    {
        Board.CssName = "board";
        Board.PosChanged += Refresh;
        Board.LayoutChanged += Refresh;
        thisRef = DotNetObjectReference.Create(this);
    }

    [JSInvokable]
    public void OnDrag(int clientX, int clientY)
    {
        DragCurrentBoard(clientX, clientY);
    }

    void ToggleCollapsed()
    {
        Board.IsCollapsed = !Board.IsCollapsed;
        Board.OnLayoutChanged();
    }

    private void DragCurrentBoard(int posX, int posY)
    {
        var newCursorPos = new Vector2(posX, posY);
        var dragOffset = (newCursorPos - lastCursorPos) / ZoomHandler.Zoom;
        lastCursorPos = new Vector2(posX, posY);

        Board.Pos += dragOffset;
    }

    async Task OnMouseDown(MouseEventArgs e)
    {
        lastCursorPos = e.GetClientPos();
        await DragModule.StartDrag(thisRef!, nameof(OnDrag));
    }

    public void Dispose()
    {
        Board.PosChanged -= Refresh;
        Board.LayoutChanged -= Refresh;
        thisRef?.Dispose();
    }

    private async Task ShowCardModal()
    {
        var options = new ModalOptions { Position = ModalPosition.Middle };
        var modal = Modal.Show<CardCreationModal>("Сформулируйте задачу 🐷", options);

        var res = await modal.Result;

        if (res.Confirmed)
        {
            var cardName = res.Data!.ToString()!;
            var card = new BlazorCards.Card(cardName);
            card.Data = await ProjectApi.CreateTaskAsync(Board.GetProject().Id, cardName);
            Board.First().Add(card);
            await NewCardCreated.InvokeAsync(card);
        }
    }

    private void Refresh() => StateHasChanged();
}
