@using Modals

@if (Board is { })
{
    <div class="d-flex position-relative overflow-hidden p-sm-3 flex-row @Board.CssName" >
        <CascadingValue Value="lastDraggingCard">
            <CascadingValue Value="cardDetailsModalOptions">
                <div class="d-flex flex-row" style="flex: auto !important; width: 100% !important;">
                    @foreach (var column in Board)
                    {
                        <BoardColumnView BoardColumn="column" @key="column" NewCardCreated="SubscribeDragHandler" />
                    }
                </div>
            </CascadingValue>
        </CascadingValue>
    </div>
}

@code {

    private readonly ModalOptions cardDetailsModalOptions = new()
    {
        Size = Blazored.Modal.ModalSize.ExtraLarge,
        DisableBackgroundCancel = true
    };
    
    BlazorCards.Card? lastDraggingCard;

    [Parameter] public Board? Board { get; set; }

    public void InitializeEventHandlers(Board value)
    {
        foreach (var card in value.AllCards())
            card.DragStart += UpdateDraggingCard;
    }

    private void SubscribeDragHandler(BlazorCards.Card createdCard)
    {
        createdCard.DragStart += UpdateDraggingCard;
    }
    
    private void UpdateDraggingCard(BlazorCards.Card card)
    {
        lastDraggingCard = card;
        InvokeAsync(StateHasChanged);
        Console.WriteLine($"LastDraggingCard changed on {card.Title}");
    }

    private void Refresh() => StateHasChanged();

    public override string ToString()
    {
        return $"BoardView - {Board}";
    }
}
