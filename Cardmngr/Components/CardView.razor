@using Onlyoffice.Api.Common
@using System.Security.Claims

@inject IProjectApi ProjectApi
@inject AuthenticationStateProvider AuthenticationState
@inject CardDropService CardDropService

<li class="@Card.CssName @CssDragOver @CssDragStart @CssDeadline" @onclick="OpenModal"
    @ondragover="() => { if (!highlighted) highlighted = true; }" @ondragover:stopPropagation @ondragover:preventDefault
    @ondragenter:preventDefault draggable="@canEdit.ToString()" @ondragleave="() => highlighted = false"
    @ondrop:stopPropagation @ondrop="OnDrop" @ondragstart="OnDragStart"
    @ondragend="() => isDragged = false" >
    <div class="container py-1 px-4 default-text" style="min-height: 100px;">
        <div class="row py-1">
            <div class="px-0 d-flex flex-row">
                @if (Task.Priority == (int)TaskPriority.High)
                {
                    <div style="margin-right: 5px;">
                        <Tool IconName="IconName.ArrowUpCircleFill" IconColor="IconColor.Primary" 
                            TooltipTitle="Приоритет - Высокий" TooltipPlacement="TooltipPlacement.Bottom" />
                    </div>
                }
                <div style="overflow: hidden;">@Card.Title</div>
            </div>
        </div>
        @if (Task.Description is { })
        {
            <div class="row fw-light max-height-100" >
                @Task.Description
            </div>
        }
        @if (Task.Subtasks?.Any() ?? false)
        {
            <div class="row py-1">
                    <div class="d-flex justify-content-end">
                        + @Task.Subtasks.Count подзадачи
                    </div>
            </div>
        }
        @if (Task.Milestone is { })
        {
            <div class="row py-1">
                <div class="px-0">
                    <MilestoneLabel Milestone="Task.Milestone" />
                </div>
            </div>
        }
        @if (Task.Responsibles?.Any() ?? false)
        {
            <div class="row py-1">
                <div class="px-0">
                    <ResponsiblesView Responsibles="Task.Responsibles" ImageSize="25" ShowName="true" MaxCount="2" />
                </div>
            </div>
        }
        @if (Task.Deadline is { })
        {
            <div class="row py-1">
                <div class="d-flex p-0 justify-content-end align-items-center">
                    @if (Task.IsDeadlineOut())
                    {
                        <Tool IconName="IconName.Fire" IconColor="IconColor.Danger" 
                            TooltipTitle="@(GetDeadlineString())" TooltipPlacement="TooltipPlacement.Left" />
                        <span class="small ms-2 text-danger" >
                            Крайний срок:
                            @Task.Deadline?.ToString("d MMM yyyy г.")</span>
                    }
                    else
                    {
                        <span class="small ms-2 fw-lighter" >
                            Крайний срок:
                            @Task.Deadline?.ToString("d MMM yyyy г.")</span>
                    }
                </div>
            </div>
        }
    </div>
</li>

@code {
    private bool canEdit;
    
    [CascadingParameter(Name = "DetailsModal")]
    private ModalOptions DetailsModal { get; set; } = null!;

    [CascadingParameter] IModalService Modal { get; set; } = null!;

    [CascadingParameter]
    private BlazorCards.Card? LastDraggingCard { get; set; }
    

    string CssDragOver => highlighted ? "dragover" : "";
    string CssDragStart => isDragged ? "dragged" : "";
    string CssDeadline => Task.IsDeadlineOut() ? "red-border" : "";

    private bool highlighted;
    private bool isDragged;
    [Parameter] public BlazorCards.Card Card { get; set; } = null!;

    private Onlyoffice.Api.Models.Task Task => Card.GetTask();

    protected override void OnInitialized()
    {
        if (AuthenticationState is { })
        {
            canEdit = IsCanEdit((CookieStateProvider)AuthenticationState);

        } else throw new NullReferenceException("Card auth state is null");
        
        Card.CssName = "my-card";
    }

    private async Task OpenModal()
    {
        var parameters = new ModalParameters
        {
            { "Card", Card },
            { "IsCanEdit", canEdit }
        };

        var res = await Modal.Show<Modals.CardDetailsModal>("", parameters, DetailsModal).Result;

        if (res.Confirmed)
        {
            Card.OnLayoutChanged();
        }
    }

    private async Task OnDrop()
    {
        highlighted = false;
        if (LastDraggingCard is { } && !ReferenceEquals(LastDraggingCard, Card))
        {
            if (await CardDropService.Drop(LastDraggingCard, Card))
            {
                Card.Column!.AddBefore(Card, LastDraggingCard);
            }
        }
    }

    private bool IsCanEdit(CookieStateProvider provider)
    {
        var userId = provider["UserId"];

        return 
            bool.Parse(provider["IsAdmin"]) ||
            Task.CreatedBy!.Id == userId || 
            Task.Responsibles!.Any(x => x.Id == userId);
    }

    private string GetDeadlineString()
    {
        if (Task.Deadline is not { }) throw new InvalidOperationException("Task deadline is null");
        var diff = DateTime.Now.Date - Task.Deadline.Value.Date;
        return diff.TotalDays == 0
            ? "Срок истек - Сегодня"
            : $"Срок истек - {diff.TotalDays} {Utils.Common.GetDayNameByDayCount(diff.TotalDays)} назад";
    }

    void OnDragStart()
    {
        isDragged = true;
        Card.OnDragStart();
    }
}