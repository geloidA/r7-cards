@using Onlyoffice.Api.Common
@using System.Security.Claims

@inject IProjectApi ProjectApi

<li class="@Card.CssName @CssDragOver @CssDragStart @CssDeadline" @onclick="OpenModal"
    @ondragover="DragOver" @ondragover:stopPropagation @ondragover:preventDefault
    @ondragenter:preventDefault draggable="@canEdit.ToString()" @ondragleave="DragLeave"
    @ondrop:stopPropagation @ondrop="Drop" @ondragstart="DragStart"
    @ondragend="() => isDragged = false" >
    <div class="container py-1 px-4 default-text">
        <div class="row py-1">
            <div class="px-0 d-flex flex-row">
                @if (Task.Priority == (int)TaskPriority.High)
                {
                    <Tool IconName="IconName.Fire" IconColor="IconColor.Danger" 
                        TooltipTitle="Приоритет - Высокий" TooltipPlacement="TooltipPlacement.Bottom" />
                }
                else
                {
                    <Tool IconName="IconName.EmojiNeutral" IconColor="IconColor.Success"
                        TooltipTitle="Приоритет - Обычный" TooltipPlacement="TooltipPlacement.Bottom" />
                }
                <div class="ms-1">@Card.Title</div>
            </div>
        </div>
        <div class="row fw-light max-height-100" >
            @Task.Description
        </div>
        <div class="row py-1">
            @if (Task.Subtasks?.Any() ?? false)
            {
                <div class="d-flex justify-content-end">
                    + @Task.Subtasks.Count подзадачи
                </div>
            }
        </div>
        <div class="row py-1">
            <div class="px-0">
                @if (Task.Responsibles?.Any() ?? false)
                {
                    <ResponsiblesView ShowTooltip="true" Responsibles="Task.Responsibles" MaxCount="2" />
                }
            </div>
        </div>
        <div class="row py-1">
            @if (Task.CreatedBy is { })
            {
                <div class="fw-light px-0"
                    style="color: var(--main-board-bg-light);">
                    Создано: @Task.CreatedBy.DisplayName
                </div>
            }
        </div>
    </div>
</li>

@code {
    private bool canEdit;

    [CascadingParameter]
    private ModalOptions CardDetailsModalOptions { get; set; } = null!;

    [CascadingParameter]
    private Task<AuthenticationState>? AuthenticationState { get; set; }

    [CascadingParameter] IModalService Modal { get; set; } = null!;

    [CascadingParameter]
    private BlazorCards.Card? LastDraggingCard { get; set; }

    [CascadingParameter]
    private Board Board { get; set; } = null!;

    string CssDragOver => highlighted ? "dragover" : "";
    string CssDragStart => isDragged ? "dragged" : "";
    string CssDeadline => IsDeadlineOut() ? "red-border" : "";

    private bool highlighted;
    private bool isDragged;
    [Parameter] public BlazorCards.Card Card { get; set; } = null!;

    private Onlyoffice.Api.Models.Task Task => Card.GetTask();

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine(DateTime.Now);
        if (AuthenticationState is { })
        {
            var authState = await AuthenticationState;
            canEdit = IsCanEdit(authState.User.Claims);

        } else throw new NullReferenceException("Card auth state is null");
        
        Card.CssName = "my-card";
    }

    private async Task OpenModal()
    {
        var parameters = new ModalParameters
        {
            { "Card", Card },
            { "IsCanEdit", canEdit }
        };

        var modal = Modal.Show<Modals.CardDetailsModal>("", parameters, CardDetailsModalOptions);
        
        var res = await modal.Result;
    }

    async Task Drop()
    {
        highlighted = false;
        if (LastDraggingCard is { } && LastDraggingCard != Card)
        {
            await UpdateCardStatus(LastDraggingCard);
            LastDraggingCard.Column!.Remove(LastDraggingCard);
            Card.Column!.AddBefore(Card, LastDraggingCard);
        }
    }

    private async Task UpdateCardStatus(BlazorCards.Card card)
    {
        var current = Card.GetTask();
        var other = card.GetTask();

        if (current.Status != other.Status || current.CustomTaskStatus != other.CustomTaskStatus)
        {
            await ProjectApi.UpdateTaskStatusAsync(other.Id, (Status)current.Status, current.CustomTaskStatus);
            other.Status = current.Status;
            other.CustomTaskStatus = current.CustomTaskStatus;
        }
    }

    private bool IsCanEdit(IEnumerable<Claim> claims)
    {
        var isAdmin = bool.Parse(claims.First(x => x.Type == "IsAdmin").Value);
        var userId = claims.First(x => x.Type == "UserId").Value;

        return 
            isAdmin || 
            Task.CreatedBy!.Id == userId || 
            Task.Responsibles!.Any(x => x.Id == userId);
    }

    private bool IsDeadlineOut()
    {
        return Task.Deadline.HasValue 
            ? DateTime.Now >= Task.Deadline && Task.Status != (int)Status.Closed
            : false;
    }

    void DragOver()
    {
        if (!highlighted) highlighted = true;
    }

    void DragLeave()
    {
        highlighted = false;
    }

    void DragStart()
    {
        isDragged = true;
        Card.OnDragStart();
    }
}