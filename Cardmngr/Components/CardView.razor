@using Onlyoffice.Api.Common

@inject IProjectApi ProjectApi

<li class="@Card.CssName @CssDragOver @CssDragStart @CssHighPriority"
    @ondragover="DragOver" @ondragover:stopPropagation @ondragover:preventDefault
    @ondragenter:preventDefault draggable="true" @ondragleave="DragLeave"
    @ondrop:stopPropagation @ondrop="Drop" @ondragstart="DragStart"
    @ondragend="() => isDragged = false" >
    <div class="container py-1 px-4">
        <div class="row py-1">
            <div class="px-0 d-flex flex-row">
                @if (Task.Priority == (int)TaskPriority.High)
                {
                    <Icon Name="IconName.Fire" Color="IconColor.Danger" />
                }
                else
                {
                    <Icon Name="IconName.EmojiNeutral" Color="IconColor.Success" />
                }
                <div class="ms-1">@Card.Title</div>
            </div>
        </div>
        <div class="row fw-light max-height-100" >
            @Task.Description
        </div>
        <div class="row py-1">
            @if (Task.Subtasks?.Any() ?? false)
            {
                <div class="d-flex justify-content-end">
                    + @Task.Subtasks.Count подзадачи
                </div>
            }
        </div>
        <div class="row py-1">
            @if (Task.CreatedBy is { })
            {
                <div class="fw-light px-0"
                    style="color: var(--main-board-bg-light);">
                    Создано: @Task.CreatedBy.DisplayName
                </div>
            }
        </div>
    </div>
</li>

@code {
    [CascadingParameter]
    private BlazorCards.Card? LastDraggingCard { get; set; }

    [CascadingParameter]
    private Board Board { get; set; } = null!;
    
    string CssDragOver => highlighted ? "dragover" : "";
    string CssHighPriority => Task.Priority == (int)TaskPriority.High ? "red-border" : "";
    string CssDragStart => isDragged ? "dragged" : "";
    private bool highlighted;
    private bool isDragged;
    [Parameter] public BlazorCards.Card Card { get; set; } = null!;

    private Onlyoffice.Api.Models.Task Task => Card.GetTask(); 

    protected override void OnInitialized()
    {
        Card.CssName = "my-card";
    }

    async void Drop()
    {
        highlighted = false;
        if (LastDraggingCard is { } && LastDraggingCard != Card)
        {
            LastDraggingCard.Column!.Remove(LastDraggingCard);
            Card.Column!.AddBefore(Card, LastDraggingCard);
            await UpdateCardStatus(LastDraggingCard);
        }
    }

    private async Task UpdateCardStatus(BlazorCards.Card card)
    {
        var current = Card.GetTask();
        var other = card.GetTask();

        if (current.Status != other.Status || current.CustomTaskStatus != other.CustomTaskStatus)
        {
            await ProjectApi.UpdateTaskStatusAsync(other.Id, (Status)current.Status, current.CustomTaskStatus);
            other.Status = current.Status;
            other.CustomTaskStatus = current.CustomTaskStatus;
        }
    }

    void DragOver()
    {
        if (!highlighted) highlighted = true;
    }

    void DragLeave()
    {
        highlighted = false;
    }

    void DragStart()
    {
        isDragged = true;
        Card.OnDragStart();
    }
}