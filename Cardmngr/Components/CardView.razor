<li class="@Card.CssName @CssDragOver @CssDragStart"
    @ondragover="DragOver" @ondragover:stopPropagation @ondragover:preventDefault
    @ondragenter:preventDefault draggable="true" @ondragleave="DragLeave"
    @ondrop:stopPropagation @ondrop="Drop" @ondragstart="DragStart"
    @ondragend="() => isDragged = false" @onclick="async () => await Offcanvas.ShowAsync()" >
    @Card.Title
    <br>
</li>

@code {
    [CascadingParameter]
    private BlazorCards.Card? LastDraggingCard { get; set; }

    [CascadingParameter]
    private Offcanvas Offcanvas { get; set; } = null!;

    [CascadingParameter]
    private Board Board { get; set; } = null!;
    
    string CssDragOver => highlighted ? "dragover" : "";
    string CssDragStart => isDragged ? "dragged" : "";
    private bool highlighted;
    private bool isDragged;
    [Parameter] public BlazorCards.Card Card { get; set; } = null!;

    protected override void OnInitialized()
    {
        Card.CssName = "my-card";
    }

    void Drop()
    {
        highlighted = false;
        if (LastDraggingCard is { } && LastDraggingCard != Card)
        {
            LastDraggingCard.Column!.Remove(LastDraggingCard);
            Card.Column!.AddBefore(Card, LastDraggingCard);
        }
    }

    void DragOver()
    {
        if (!highlighted) highlighted = true;
    }

    void DragLeave()
    {
        highlighted = false;
    }

    void DragStart()
    {
        isDragged = true;
        Card.OnDragStart();
    }
}