@using BlazorCards
@using Cardmngr.Utils

@implements IDisposable

@inject IJSRuntime JSRuntime

<Offcanvas @ref="offcanvas" Placement="Placement.End" />

<div class="viewport workarea" @onmousedown="@StartPan"
    @onmousedown:preventDefault>
    <div id="workarea" style="transform-origin:0% 0%;">
        <CascadingValue IsFixed="true" Value="offcanvas" >
            <CascadingValue Value="lastDraggingCard" >
                @foreach (var board in Boards)
                {
                    <BoardView Board="board" @key="board" NewCardCreated="SubscribeDragHandler" />
                }
            </CascadingValue>
        </CascadingValue>
    </div>
</div>


@code {
    BlazorCards.Card? lastDraggingCard;
    Offcanvas offcanvas = null!;
    [Parameter] public IEnumerable<Board> Boards { get; set; } = null!;

    protected override void OnInitialized()
    {        
        foreach (var card in Boards.AllCards())
            card.DragStart += UpdateDraggingCard;
    }
    
    private void UpdateDraggingCard(BlazorCards.Card card)
    {
        lastDraggingCard = card;
        InvokeAsync(StateHasChanged);
        Console.WriteLine($"LastDraggingCard changed on {card.Title}");
    }

    private void SubscribeDragHandler(BlazorCards.Card createdCard)
    {
        createdCard.DragStart += UpdateDraggingCard;
    }

    public void Dispose()
    {
        foreach (var card in Boards.AllCards())
            card.DragStart -= UpdateDraggingCard;
    }

    private Vector2 clickStartPos;

    private async Task StartPan(MouseEventArgs e)
    {
        clickStartPos = e.GetClientPos();
        await JSRuntime.InvokeVoidAsync("panzoom.startPan");
    }
}