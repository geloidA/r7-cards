@inject IProjectApi ProjectApi
@inject NavigationManager NavigationManager
@inject ILocalStorageService LocalStorage
@inject AuthenticationStateProvider AuthenticationState

@using System.Text.Json

@implements IDisposable

<Offcanvas @ref="offcanvas" Placement="Placement.Start" Size="OffcanvasSize.Small" ShowCloseButton="false"
    Style="background-color: var(--main-board-bg); border-radius: 0px 7px 7px 0px;">
    <HeaderTemplate >
        <a class="text-dark fw-bold fs-4" href="/">
            <Icon Name="IconName.Stack" />
            Карточки
        </a>
    </HeaderTemplate> 
    <BodyTemplate>
        <div class="container">
            <Card class="row bg-shadow p-1">
                <CardTitle class="mt-1"><h6>Мои проекты</h6></CardTitle>
                <CardBody class="m-0">
                    @if (userProjects is { } && userProjects.Any())
                    {
                        <div class="list-group box">
                            @foreach (var proj in userProjects)
                            {
                                <ProjectReference Project="proj" />
                            }
                        </div>
                    }
                    else
                    {
                        <span>Вы не состоите ни в одном из проектов</span>
                    }
                </CardBody>
            </Card>
            <footer class="footer d-flex gradient-bg-vertical" >
                <div class="mx-3 my-4">
                    <div @onmouseenter="() => logoutHover = true" @onmouseout="() => logoutHover = false">
                        <Tool IconName="@(logoutHover ? IconName.DoorOpenFill : IconName.DoorClosedFill)" 
                            TooltipTitle="Выйти" IconColor="IconColor.Dark" IconSize="IconSize.x5"
                            OnClick="LogoutAsync"
                            />
                    </div>
                </div>
            </footer>
        </div>
    </BodyTemplate>
</Offcanvas>

<div class="bb-top-row px-4 d-flex" style="background-color: var(--main-col-bg);">
    <div class="col-md-1 d-flex justify-content-center">
        <Button class="py-0" Color="ButtonColor.Dark" Outline="true" @onclick="OpenSidebar" >
            <Icon Name="IconName.List" />
        </Button>
    </div>
    <div class="col-md-9">
        @HeaderTitle.Content
    </div>
    <div class="col-md-2 d-flex justify-content-end">
        <Toolbar />
        <div class="ms-3">
            @if (currentUser is { })
            {
                <ProfileTool UserProfile="currentUser" />
            }
        </div>
    </div>
</div>

@code {
    private Offcanvas? offcanvas;
    private List<Onlyoffice.Api.Models.Project>? userProjects = null!;
    private Onlyoffice.Api.Models.UserProfile? currentUser;

    [CascadingParameter] HeaderTitle HeaderTitle { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        HeaderTitle.ContentChanged += StateHasChanged;
        userProjects = await ProjectApi.GetUserProjectsAsync();

        if (AuthenticationState is { })
        {
            var provider = (CookieStateProvider)AuthenticationState;
            currentUser = JsonSerializer.Deserialize<Onlyoffice.Api.Models.UserProfile>(provider["Data"]);
        }
    }

    private async Task OpenSidebar()
    {
        if (offcanvas is { })
        {
            await offcanvas.ShowAsync();
        }
    }

    private bool logoutHover;

    private async Task LogoutAsync()
    {
        if (AuthenticationState is { })
        {            
            var provider = (CookieStateProvider)AuthenticationState;
            provider.ClearAuthInfo();
            await LocalStorage.RemoveItemAsync("isauthenticated");
            NavigationManager.NavigateTo("login");
        }
    }

    public void Dispose()
    {
        HeaderTitle.ContentChanged -= StateHasChanged;
    }
}
