@inject IProjectApi ProjectApi

@implements IDisposable

<Offcanvas @ref="offcanvas" Placement="Placement.Start" Size="OffcanvasSize.Small" ShowCloseButton="false"
    Style="background-color: var(--main-board-bg); border-radius: 0px 7px 7px 0px;">
    <HeaderTemplate >
        <a class="text-dark fw-bold fs-4" href="/">Карточки</a>
    </HeaderTemplate> 
    <BodyTemplate>
        <div class="container">
            <Card class="row bg-shadow">
                <CardTitle><h6 class="py-1">Мои проекты</h6></CardTitle>
                <CardBody>
                    @if (userProjects is { } && userProjects.Any())
                    {
                        <div class="list-group box">
                            @foreach (var proj in userProjects)
                            {
                                <ProjectReference Project="proj" />
                            }
                        </div>
                    }
                    else
                    {
                        <span>Вы не состоите ни в одном из проектов</span>
                    }
                </CardBody>
            </Card>
        </div>
    </BodyTemplate>
</Offcanvas>

<div class="bb-top-row px-4 d-flex" style="background-color: var(--main-col-bg);">
    <div class="col-md-1 justify-content-start">
        <Button class="py-0" Color="ButtonColor.Dark" Outline="true" @onclick="OpenSidebar" >
            <Icon Name="IconName.List" />
        </Button>
    </div>
    <div class="col-md-5">
        @HeaderTitle.Content
    </div>
    <div class="col-md-6 d-flex justify-content-end">
        <Toolbar />
    </div>
</div>

@code {
    private Offcanvas? offcanvas;
    private List<Onlyoffice.Api.Models.Project>? userProjects = null!;

    [CascadingParameter] HeaderTitle HeaderTitle { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        HeaderTitle.ContentChanged += StateHasChanged;
        userProjects = await ProjectApi.GetUserProjectsAsync();
    }

    private async Task OpenSidebar()
    {
        if (offcanvas is { })
        {
            await offcanvas.ShowAsync();
        }
    }

    public void Dispose()
    {
        HeaderTitle.ContentChanged -= StateHasChanged;
    }
}
