@inject AuthenticationStateProvider AuthenticationState

<Badge class="p-0 w-100 overflow-hidden" @onclick="Toggle" Color="BadgeColor">
    <div class="@CssSelected p-1 timeline-milestone">
        @Milestone.Title
    </div>
</Badge>

<div class="tool-bar d-flex justify-content-center" style="margin-top: -8px;">
    <Icon class="clickable" @onclick="ShowDetailsModal" Name="IconName.EyeFill" />
</div>

@code {
    private bool canEdit;
    private string CssSelected => Milestone.IsSelected ? "selected" : "";

    [CascadingParameter] IModalService Modal { get; set; } = null!;
    [Parameter] public MilestoneModel Milestone { get; set; } = null!;

    protected override void OnInitialized()
    {
        if (AuthenticationState is { })
        {
            canEdit = IsCanEdit((CookieStateProvider)AuthenticationState);

        } else throw new NullReferenceException("Card auth state is null");
    }

    private bool IsCanEdit(CookieStateProvider provider)
    {
        var userId = provider["UserId"];

        return bool.Parse(provider["IsAdmin"]) ||
            Milestone.CreatedBy?.Id == userId || 
            Milestone.Responsible?.Id == userId;
    }

    private BadgeColor BadgeColor
    {
        get
        {
            if (Milestone.Status == Status.Closed) return BadgeColor.Success;

            return DateTime.Now > Milestone.Deadline!.Value
                ? BadgeColor.Danger
                : BadgeColor.Warning;
        }
    }

    private void Toggle()
    {
        Milestone.Project.Milestones.ToggleMilestone(Milestone);
    }

    private async Task ShowDetailsModal()
    {
        var paramerters = new ModalParameters
        {
            { "Milestone", Milestone },
            { "Disabled", !canEdit }
        };

        var options = new ModalOptions 
        { 
            Position = ModalPosition.Middle,
            Size = Blazored.Modal.ModalSize.Medium,
            DisableBackgroundCancel = true 
        };

        await Modal.Show<MilestoneDetailsModal>("", paramerters, options).Result;
    }
}
