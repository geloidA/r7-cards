<Badge class="p-0 w-100 overflow-hidden" @onclick="ChangeSelectionMode" Color="BadgeColor">
    <div class="@CssSelected p-1 timeline-milestone">
        @Milestone.Title
    </div>
</Badge>

<div class="tool-bar d-flex justify-content-center" style="margin-top: -8px;">
    <Icon class="clickable" @onclick="ShowDetailsModal" Name="IconName.EyeFill" />
</div>

@code {
    private bool isSelected;
    private string CssSelected => isSelected ? "selected" : "";

    [CascadingParameter] IModalService Modal { get; set; } = null!;
    [Parameter] public Onlyoffice.Api.Models.Milestone Milestone { get; set; } = null!;
    [Parameter] public DateTime Start { get; set; }
    [Parameter] public EventCallback<bool> OnSelectionChanged { get; set; }
    [Parameter] public EventCallback<Onlyoffice.Api.Models.Milestone> OnUpdated { get; set; }
    [Parameter] public EventCallback<Onlyoffice.Api.Models.Milestone> OnDeleted { get; set; }

    private BadgeColor BadgeColor
    {
        get
        {
            if (Milestone.Status == (int)CommonStatus.Closed) return BadgeColor.Success;

            return DateTime.Now > Milestone.Deadline!.Value
                ? BadgeColor.Danger
                : BadgeColor.Warning;
        }
    }

    private async Task ChangeSelectionMode()
    {
        isSelected = !isSelected;

        if (OnSelectionChanged.HasDelegate)
        {
            await OnSelectionChanged.InvokeAsync(isSelected);
        }
    }

    private async Task ShowDetailsModal()
    {
        var paramerters = new ModalParameters
        {
            { "Milestone", Milestone }
        };

        var options = new ModalOptions 
        { 
            Position = ModalPosition.Middle,
            Size = Blazored.Modal.ModalSize.Medium,
            DisableBackgroundCancel = true 
        };

        var res = await Modal.Show<MilestoneDetailsModal>("", paramerters, options).Result;

        if (res.Confirmed && res.Data is MilestoneDetailsModal.ModalAction<Onlyoffice.Api.Models.Milestone> action)
        {
            //TODO: do something. shit code
            if (action.Type == MilestoneDetailsModal.ModalActionType.Delete)
            {
                if (OnDeleted.HasDelegate)
                {
                    await OnDeleted.InvokeAsync(action.Data);
                }
            }
            else if (action.Type == MilestoneDetailsModal.ModalActionType.Update)
            {
                if (OnUpdated.HasDelegate)
                {
                    await OnUpdated.InvokeAsync(action.Data);
                }
            }            
        }
    }
}
