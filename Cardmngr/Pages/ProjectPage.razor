@page "/project/{ProjectId:int}"

@implements IDisposable

@using Onlyoffice.Api.Models
@using Task = System.Threading.Tasks.Task

@inherits AuthorizedPage

@inject IProjectApi ProjectApi


@if (board is { })
{

    <Offcanvas @ref="menuCanvas" ShowCloseButton="false" />

    <div class="d-flex flex-column position-relative mb-5" style="flex: auto !important;">
        <div class="row">
            <div class="col-md-11">

            </div>
            <div class="col-md-1">
                <Tool IconName="IconName.List" IconSize="IconSize.x5" Text="Меню"
                    OnClick="ShowMenu" />
            </div>
        </div>
        <div class="d-flex flex-column" style="flex: auto !important; white-space: nowrap !important; overflow-x: auto;">
            <BoardView @ref="boardView" Board="board"  />
        </div>
    </div>
}
else
{
    <CardText>Загрузка</CardText>
}

@code {
    private Board? board;
    private Offcanvas menuCanvas = null!;
    private BoardView boardView = null!;

    [Parameter] public int? ProjectId { get; set; }
    [CascadingParameter] HeaderTitle HeaderTitle { get; set; } = null!;

    protected override async Task OnParametersSetAsync()
    {
        if (ProjectId.HasValue && ProjectId != board?.GetProject().Id)
        {
            board = await InitializeBoard();
            boardView?.InitializeEventHandlers(board);
            HeaderTitle.Content = GetTitleContent(board.GetProject().Title!);
        }
    }

    private async Task<Board> InitializeBoard()
    {
        var project = ProjectApi.GetProjectByIdAsync(ProjectId!.Value);
        var tasks = ProjectApi.GetFiltredTasksAsync(FilterTasksBuilder.Instance.WithProjectId(ProjectId.Value));
        var statuses = await ProjectApi.GetAllTaskStatusesAsync();

        var orderedStatuses = statuses
            .OrderBy(x => (x.StatusType, x.Order));

        return ConvertToBoard(await project, await tasks, orderedStatuses);
    }

    private static Board ConvertToBoard(Project proj, List<Onlyoffice.Api.Models.Task> tasks, IEnumerable<Onlyoffice.Api.Models.TaskStatus> statuses)
    {
        return new Board(statuses, DivideOnStatues(statuses, tasks), proj.Title!, proj)
        {
            CssName = "board"
        };
    }

    private static IEnumerable<IEnumerable<Onlyoffice.Api.Models.Task>> DivideOnStatues(
        IEnumerable<Onlyoffice.Api.Models.TaskStatus> statuses,
        IEnumerable<Onlyoffice.Api.Models.Task> tasks)
    {
        return statuses
            .Select(x => tasks
                .Where(t => t.CustomTaskStatus.HasValue ? t.CustomTaskStatus.Value == x.Id : 
                    t.Status == x.StatusType && x.IsDefault)
                .OrderBy(x => (-x.Priority, x.Deadline ?? DateTime.MaxValue))
                .ThenByDescending(x => x.Updated));
    }

    private RenderFragment<string> GetTitleContent = title => 
        @<div class="font-monospace fw-bold">
            @title
        </div>;

    private async Task ShowMenu()
    {
        await menuCanvas.ShowAsync<ProjectMenuModal>("", new Dictionary<string, object>
        {
            { "Project", board!.GetProject() }
        });
    }

    public void Dispose()
    {
        menuCanvas.Dispose();
        HeaderTitle.Content = null;
    }
}