@page "/project/{ProjectId:int}"

@implements IDisposable

@using Onlyoffice.Api.Models
@using KolBlazor.Components.Timeline
@using Task = System.Threading.Tasks.Task

@inherits AuthorizedPage

@inject IProjectApi ProjectApi

@if (board is { } && milestones is { })
{
    <Offcanvas @ref="menuCanvas" ShowCloseButton="false" />

    <div class="d-flex flex-column position-relative mb-5" style="flex: auto !important;">
        <div class="row mb-2" style="margin-left: 10px;">
            <div class="col-md-11 d-flex flex-column" >
                <KolTimeline >
                    @foreach (var milestone in milestones)
                    {
                        var minDate = board.GetMilestoneStart(milestone);
                        <KolTimelineItem @key="milestone" End="milestone.Deadline!.Value" Start="minDate">
                            <TimelineMilestone OnSelectionChanged="x => boardView.ToggleMilestone(milestone)" 
                                Milestone="milestone" Start="minDate" />
                        </KolTimelineItem>
                    }
                </KolTimeline>
            </div>
            <div class="col-md-1 align-self-center">
                <Tool IconName="IconName.List" IconSize="IconSize.x5" Text="Меню"
                    OnClick="ShowMenu" />
            </div>
        </div>
        <div class="d-flex flex-column ms-3" style="flex: auto !important; white-space: nowrap !important; overflow-x: auto;">
            <BoardView @ref="boardView" Board="board" OnCreatedCard="Refresh" />
        </div>
    </div>
}
else
{
    <CardText>Загрузка</CardText>
}

@code {
    private Board? board;
    private List<Milestone> milestones = null!;
    private Offcanvas menuCanvas = null!;
    private BoardView boardView = null!;

    [Parameter] public int? ProjectId { get; set; }
    [CascadingParameter] HeaderTitle HeaderTitle { get; set; } = null!;

    protected override async Task OnParametersSetAsync()
    {
        if (ProjectId.HasValue && ProjectId != board?.GetProject().Id)
        {
            board = await InitializeBoard();
            milestones = await ProjectApi.GetMilestonesByProjectIdAsync(ProjectId.Value);
            boardView?.InitializeEventHandlers(board);

            foreach (var card in board.AllCards())
                card.LayoutChanged += Refresh;

            HeaderTitle.Content = GetTitleContent(board.GetProject().Title!);
        }
    }

    private async Task<Board> InitializeBoard()
    {
        var project = ProjectApi.GetProjectByIdAsync(ProjectId!.Value);
        var tasks = ProjectApi.GetFiltredTasksAsync(FilterTasksBuilder.Instance.WithProjectId(ProjectId.Value));
        var statuses = await ProjectApi.GetAllTaskStatusesAsync();

        var orderedStatuses = statuses
            .OrderBy(x => (x.StatusType, x.Order));

        return ModelConverter.ConvertToBoard(await project, await tasks, orderedStatuses);
    }

    private RenderFragment<string> GetTitleContent = title => 
        @<div class="fw-bold">
            @title
        </div>;

    private async Task ShowMenu()
    {
        await menuCanvas.ShowAsync<ProjectMenuModal>("", new Dictionary<string, object>
        {
            { "Board", board! }
        });
    }

    private void Refresh() => StateHasChanged();

    public void Dispose()
    {
        menuCanvas.Dispose();
        HeaderTitle.Content = null;
    }
}