@inject IConfiguration Config

<EditForm Model="Subtask" OnValidSubmit="Submit" Context="subtask" >
    <DataAnnotationsValidator/>
    <FluentCard AreaRestricted="false" Width="250px" Height="200px" Style="padding: 0;">
        <div class="d-flex justify-content-end p-2">
            @if (!Disabled)
            {
                if (Subtask.Status != (int)Status.Closed)
                {
                    if (isEditMode)
                    {
                        <FluentIcon Color="Color.Success" Value="@(new Icons.Filled.Size20.CheckmarkCircle())" OnClick="Submit" />
                    }
                    else
                    {
                        <FluentIcon Id="@menuGuid.ToString()" OnClick="() => open = !open" Value="@(new Icons.Regular.Size16.Edit())" />

                        <FluentMenu @bind-Open="open" Anchor="@menuGuid.ToString()" >
                            <FluentMenuItem OnClick="BlockOthers" Disabled="HasEditingSubtask" >
                                Редактировать
                            </FluentMenuItem>
                            <FluentMenuItem OnClick="DeleteSubtask" >
                                Удалить
                            </FluentMenuItem>
                        </FluentMenu>
                    }
                }
                else
                {
                    <Tool Icon="@(new Icons.Regular.Size16.Delete())" Color="Color.Error" 
                        TooltipTitle="Удалить" 
                        OnClick="DeleteSubtask" />
                }
            }
        </div>
        <div class="p-1 overflow-auto" style="height: 55%;">
            @if (Subtask.Status == (int)Status.Open)
            {
                if (isEditMode)
                {
                    <FluentTextArea Style="width: 100%; height: 100%;"
                        Class="scrollbar-none" @bind-Value="Subtask.Title" />
                }
                else
                {
                    <p class="user-select-none">@Subtask.Title</p>
                }
            }
            else
            {
                <i>@Subtask.Title</i>
            }
        </div>
        <FluentAutocomplete class="px-1" Disabled="!isEditMode"
            TOption="UserInfo" MaximumOptionsSearch="100" AutoComplete="off"
            IconSearch="@(new Icons.Regular.Size16.Person())"
            MaximumSelectedOptions="1" Placeholder="Без ответственного"
            SelectedOptionsChanged="SelectedResponsibleChanged"
            SelectedOptions="SelectedResponsible"
            OnOptionsSearch="OnSearch">

            <SelectedOptionTemplate>
                <FluentPersona Name="@context.DisplayName" 
                    ImageSize="22px"
                    Class="p-1"
                    Style="height: 26px; background: var(--main-responsibles-bg); font-size: 12px;"
                    Image="@($"{proxyUrl}/api/people{context.AvatarSmall}")" />
            </SelectedOptionTemplate>

            <OptionTemplate>
                <FluentPersona Name="@context.DisplayName"
                    ImageSize="22px"
                    Image="@($"{proxyUrl}/api/people{context.AvatarSmall}")" />
            </OptionTemplate>

            <HeaderContent>
                <FluentLabel Color="Color.Accent"
                    Style="padding: 8px; font-size: 11px; border-bottom: 1px solid var(--neutral-fill-stealth-hover);">
                    Команда проекта
                </FluentLabel>
            </HeaderContent>

            <FooterContent>
                @if (!context.Any())
                {
                    <FluentLabel Style="font-size: 11px; text-align: center; width: 200px;">
                        Нет результатов
                    </FluentLabel>
                }
            </FooterContent>

        </FluentAutocomplete>
        <FluentFooter class="d-flex flex-row ps-1">
            @if (Subtask.Status == (int)Status.Open)
            {
                <Tool Icon="@(new Icons.Filled.Size20.Clock())" Color="@Color.Info" Disabled="@Disabled"
                    OnClick="@SwitchSubtaskStatus" />
            }
            else
            {
                <Tool Icon="@(new Icons.Filled.Size20.CheckmarkCircle())" Color="Color.Success" 
                    Disabled="@(Task.IsClosed() || Disabled)" OnClick="@SwitchSubtaskStatus" />
            }
        </FluentFooter>
    </FluentCard>
</EditForm>

@code {
    IEnumerable<UserInfo> SelectedResponsible = [];
    readonly Guid menuGuid = Guid.NewGuid();
    string proxyUrl = null!;
    bool open;

    protected override void OnInitialized()
    {        
        proxyUrl = Config.CheckKey("proxy-url");
        if (Subtask.Responsible is { })
        {
            SelectedResponsible = [State.Team.Single(x => x.Id == Subtask.Responsible)];
        }
    }

    void OnSearch(OptionsSearchEventArgs<UserInfo> e)
    {
        e.Items = State.Team
            .Where(u => u.DisplayName.StartsWith(e.Text, StringComparison.InvariantCultureIgnoreCase))
            .OrderBy(u => u.DisplayName);
    }

    void SelectedResponsibleChanged(IEnumerable<UserInfo> newVal)
    {
        Subtask.Responsible = newVal.SingleOrDefault()?.Id;
        SelectedResponsible = newVal;
    }
}