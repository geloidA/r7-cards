@using System.Globalization

@inject AuthenticationStateProvider AuthenticationStateProvider

<div class="short-task w-100 h-100 clickable" @onclick="ShowTaskDetails" >
    <div class="info-container">
        <div class="d-flex w-100 h-100">
            @if(Task.Responsibles.Any())
            {
                <UserAvatar ShowTooltip="true" User="Task.Responsibles.First()" />
            }
            <span class="ms-2 align-self-center">@Task.Title</span>
        </div>
        <div class="col d-flex flex-column w-100 h-100" style="margin-right: 5px;">
            <div class="d-flex info-text">
                @if (Task.Priority == Domain.Enums.Priority.High)
                {
                    <Icon Name="IconName.ArrowUpCircleFill" Color="IconColor.Primary" />
                }
            </div>
            <div class="info-text align-items-end">
                @if (Task.IsDeadlineOut())
                {
                    <Icon Name="IconName.Fire" Color="IconColor.Danger" />
                    <span class="text-danger ms-1" style="font-size: 14px;">@Task.Deadline?.ToShortDateString()</span>
                }
                else
                {
                    <span style="font-size: 14px;">@Task.Deadline?.ToShortDateString()</span>
                }
                @if (Task.Status == Domain.Enums.Status.Open)
                {
                    <Icon class="ms-1" Name="IconName.XCircleFill" Color="IconColor.Danger" />
                }
                else
                {
                    <Icon class="ms-1" Name="IconName.CheckCircleFill" Color="IconColor.Success" />
                }
            </div>
        </div>
        <div class="bg-progress" style="@CompleteProgress"></div>
    </div>
</div>

@code {
    [CascadingParameter(Name = "DetailsModal")] ModalOptions Options { get; set; } = null!;
    [CascadingParameter] IModalService Modal { get; set; } = null!;

    [Parameter, EditorRequired] public OnlyofficeTask Task { get; set; } = null!;

    private string CompleteProgress
    {
        get
        {
            if (Task.IsClosed()) return "width: 100%;";
            if (!Task.Subtasks.Any()) return "width: 0%;";
            var completeProcentage = (Task.Subtasks.Count(x => x.Status == Domain.Enums.Status.Closed) * 100.0) / Task.Subtasks.Count;
            return $"width: {completeProcentage.ToString(CultureInfo.InvariantCulture)}%;";
        }
    }

    private async Task ShowTaskDetails()
    {
        var paramerters = new ModalParameters
        {
            { "Model", Task }
        };

        await Modal.Show<TaskDetailsModal>("", paramerters, Options).Result;
    }
}
