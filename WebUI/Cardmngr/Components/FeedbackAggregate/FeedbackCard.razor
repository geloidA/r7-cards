@using Cardmngr.Application.Clients.FeedbackClient
@using Cardmngr.Components.FeedbackAggregate.Modals

@inject IFeedbackClient FeedbackClient
@inject AuthenticationStateProvider AuthenticationStateProvider

<li class="feedback-card clickable" style="font-size: 13px;" @onclick="openModalFunc" >
    <div class="py-1 px-2 h-100" >
        <span class="fw-bold" style="overflow: hidden;">@Feedback.Title</span>
        @if (Feedback.Description is { })
        {
            <div class="mt-1 max-height-100 fw-light desc-text">
                @Feedback.Description
            </div>
        }
        <UserAvatar User="@Feedback.Creator" Size="25" ShowName="true" />
        <div class="mt-2 d-flex">
            @if (Feedback.Status == FeedbackStatus.Todo)
            {
                <FluentBadge @onclick:stopPropagation>
                    <div class="d-flex align-self-center" >
                        <div @onclick="ToggleLike">
                            <FluentIcon Value="@(new Icons.Filled.Size16.ThumbLike())" 
                                Color="@(likePressed ? Color.Success : Color.Info)" />
                            <span class="ms-1">@Feedback.LikedUsers.Count</span>
                        </div>
                    </div>

                    <div class="d-flex align-self-center ms-2" >
                        <div @onclick="ToggleDislike">
                            <FluentIcon Value="@(new Icons.Filled.Size16.ThumbDislike())" 
                                Color="@(dislikePressed ? Color.Error : Color.Info)" />
                            <span class="ms-1">@Feedback.DislikedUsers.Count</span>
                        </div>
                    </div>
                </FluentBadge>
            }
            <FluentSpacer />
            <div class="d-flex">
                @if (Feedback.Status == FeedbackStatus.Finished)
                {
                    <FluentIcon class="d-flex align-items-center" 
                        Value="@(new Icons.Filled.Size16.CheckmarkCircle())" Color="Color.Success" />
                    <span class="ms-1">
                        Выполнено:
                        @Feedback.Finished!.Value.ToShortDateString()
                    </span>
                }
                else
                {
                    <FluentIcon class="d-flex align-items-center" 
                        Value="@(new Icons.Regular.Size16.DocumentEdit())" Color="Color.Accent" />
                    <span class="ms-1">
                        Создано:
                        @Feedback.Created.ToShortDateString()
                    </span>
                }
            </div>
        </div>
    </div>
</li>

@code {
    bool likePressed;
    bool dislikePressed;

    [CascadingParameter] FeedbacksState State { get; set; } = null!;
    [Parameter] public Feedback Feedback { get; set; } = null!;    
    [CascadingParameter(Name = "DetailsModal")] ModalOptions DetailsModal { get; set; } = null!;
    [CascadingParameter] IModalService Modal { get; set; } = null!;

    protected override void OnInitialized()
    {
        openModalFunc = OpenModal;
        var userId = AuthenticationStateProvider.ToCookieProvider().UserId;
        likePressed = Feedback.LikedUsers.Contains(userId);
        dislikePressed = Feedback.DislikedUsers.Contains(userId);
    }

    Func<Task> openModalFunc = null!;

    async Task OpenModal()
    {
        var parameters = new ModalParameters
        {
            { "State", State },
            { "Model", Feedback }
        };

        await Modal.Show<FeedbackDetailsModal>("", parameters, DetailsModal).Result;
    }

    async Task ToggleLike()
    {
        likePressed = !likePressed;
        dislikePressed = false;

        await State.ToggleFeedbackLikeAsync(Feedback.Id);
    }

    async Task ToggleDislike()
    {
        dislikePressed = !dislikePressed;
        likePressed = false;

        await State.ToggleFeedbackDislikeAsync(Feedback.Id);
    }
}
