@using Onlyoffice.Api.Models
@using Onlyoffice.Api.Validations

@inherits AddEditModalBase<Milestone, MilestoneUpdateData>

<CascadingValue Value="State" IsFixed >
<CascadingValue Value="Buffer" IsFixed >

    <Offcanvas @ref="currentModal"
               Placement="MyOffcanvasPlacement.End" 
               Width="550"
               Class="my-offcanvas my-offcanvas-right"
               OnClose="ShowCloseConfirm" >
                    
        <EditForm Model="Buffer" 
                  OnValidSubmit="SubmitAsync" 
                  @onkeydown="HandleKeyDown" >
            <FluentValidationValidator />
            <OffcanvasHeader Class="flex flex-col gap-1">
                @if (!IsAdd)
                {
                    <StatusBar Created="Model?.Created" 
                                Updated="Model?.Updated"/>
                }
                <AutoGrowTextArea style="font-size: 20px; font-weight: 500;" ReadOnly="!CanEdit"
                    @bind-Value="Buffer.Title" class="p-0 w-full" Autofocus="IsAdd" />
            </OffcanvasHeader>
            <FluentValidationMessage For="() => Buffer.Title" class="ms-3" />
            <OffcanvasBody Class="flex flex-col gap-2">    
                <Markdown @bind-Text="Buffer.Description"
                          Placeholder="Добавьте описание"
                          DisabledPlaceholder="У этой вехи нет описания"
                          Disabled="!CanEdit"
                          Class="mb-2" />
                @if (!IsAdd)
                {
                    <MelistoneShortTasks MilestoneTasks="@milestoneTasks" />
                }
                <DetailsCategory Header="Параметры" Open="true" >
                    <Content>
                        <div class="flex flex-col gap-5">
                            <InfoItem Title="Крайний срок"
                                        Icon="new Icons.Filled.Size20.Calendar()">
                                <Content>
                                    <DateRangeView StartReadOnly 
                                                    EndReadOnly="!CanEdit"
                                                    Start="Start" 
                                                    @bind-End="Buffer.Deadline" />
                                    <FluentValidationMessage For="() => Buffer.Deadline" />  
                                </Content>
                            </InfoItem>
                            <div>
                                <MilestoneResponsible Disabled="!CanEdit" />
                                <FluentValidationMessage For="() => Buffer.Responsible" />
                            </div>
                        </div>
                    </Content>
                </DetailsCategory>

                <div class="flex flex-row mt-2">

                    @if (!IsAdd && milestoneTasks.All(x => x.IsClosed()))
                    {
                        var isClosed = Model!.IsClosed();
                        Icon icon = isClosed ? new Icons.Filled.Size20.ArrowClockwise() : new Icons.Filled.Size20.CheckmarkCircle();

                        <FluentButton IconStart="icon" 
                                      Appearance="Appearance.Lightweight"
                                      Disabled="!CanEdit"
                                      OnClick="ToggleMilestoneStatus" >
                            @(isClosed ? "Открыть веху" : "Закрыть веху")
                        </FluentButton>
                    }

                    <FluentSpacer />

                    <FluentButton Disabled="!CanEdit" Type="ButtonType.Submit"
                        Class="font-bold" Appearance="Appearance.Outline" >
                        @SubmitText
                    </FluentButton>

                    @if (!IsAdd)
                    {
                        <FluentButton Class="ms-2 font-bold" Disabled="!Model!.CanDelete || State.ReadOnly"
                            OnClick="DeleteAsync" BackgroundColor="@CardmngrColors.Error" Color="white" >
                            Удалить
                        </FluentButton>
                    }
                </div>
            </OffcanvasBody>
        </EditForm>
    </Offcanvas>

</CascadingValue>
</CascadingValue>

@code{
    bool enterPressed;

    void HandleKeyDown(KeyboardEventArgs e)
    {
        enterPressed = e.Key == "Enter";
    }
}