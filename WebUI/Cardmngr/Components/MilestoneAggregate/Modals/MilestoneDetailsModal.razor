@using Onlyoffice.Api.Models
@using Onlyoffice.Api.Validations

@inherits AddEditModalBase<Milestone, MilestoneUpdateData>

@inject TeamMemberSelectionDialog SelectionDialog

@using Offcanvas = Cardmngr.Components.Modals.MyBlazored.Offcanvas;

@if (buffer is { })
{
    <Cardmngr.Components.Modals.MyBlazored.Offcanvas Placement="MyOffcanvasPlacement.End" Class="my-offcanvas my-offcanvas-right"
        @ref="currentModal" >
        <EditForm Model="buffer" OnValidSubmit="SubmitAsync" >
            <FluentValidationValidator ValidatorType="@(typeof(MilestoneUpdateDataValidator))" />
            <OffcanvasHeader Class="py-0" Style="padding-top: 20px !important;">
                <TitleChanger Disabled="@(!CanEdit)" @bind-Title="@buffer.Title" />
            </OffcanvasHeader>
            <ValidationMessage For="() => buffer.Title" class="ms-3 validation-msg" />
            <OffcanvasBody Class="d-flex flex-column">
                <div class="mb-2" >
                    <WorkContainerDateProgress Start="@Start" Deadline="@buffer.Deadline"
                        Closed="@(Model?.IsClosed() ?? false)" 
                        ActiveWorks="ActiveTasks" TotalWorks="TotalTasks"/>
                </div>
                <div class="d-flex justify-content-end">
                    @if (Model?.CanDelete ?? true)
                    {
                        <UserBadge Title="Ответственный" User="State.Model!.Team.SingleOrDefault(x => x.Id == buffer.Responsible)"
                            OnClick="@ShowResponsibleSelectionModal" />
                    }
                    else
                    {
                        <UserBadge Title="Ответственный" User="State.Model!.Team.SingleOrDefault(x => x.Id == buffer.Responsible)" />
                    }
                </div>
                <ValidationMessage For="() => buffer.Responsible" class="validation-msg" />
                <Card class="p-1 mt-3">
                    <DateChanger Title="Крайний срок:" InputId="Deadline" Disabled="!CanEdit" EmptyText="Не установлен" @bind-Date="@buffer.Deadline" />
                    <ValidationMessage For="() => buffer.Deadline" class="validation-msg" />
                </Card>
                <DescriptionChanger Disabled="!CanEdit" Class="mt-2" @bind-Description="@buffer.Description" />
                @if (!IsAdd)
                {
                    <div class="mt-2">
                        <CascadingValue Value="State" IsFixed="true">
                            <CascadingValue Value="ProjectHubClient" IsFixed="true">
                                <MelistoneShortTasks MilestoneTasks="milestoneTasks" />
                            </CascadingValue>
                        </CascadingValue>
                    </div>
                }
                <div class="d-flex mt-2 flex-row">
                    <Button
                        Size="Size.Small" Disabled="!CanEdit" Type="ButtonType.Submit" 
                        Color="ButtonColor.Success" Outline="true" >
                        @SubmitText
                    </Button>
                    @if (!IsAdd)
                    {
                        <Button class="ms-2" Size="Size.Small" Disabled="!Model!.CanDelete" Color="ButtonColor.Danger"
                                @onclick="DeleteAsync"
                                Outline="true" >
                                Удалить
                        </Button>
                    }
                </div>
            </OffcanvasBody>
        </EditForm>
    </Cardmngr.Components.Modals.MyBlazored.Offcanvas>
}

@code{
    private RenderFragment<UserInfo> UserInfoRenderFragment = u =>
        @<UserAvatar ShowName="true" User="@u" />;
}