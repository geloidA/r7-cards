@using Onlyoffice.Api.Models
@using Onlyoffice.Api.Validations

@inherits AddEditModalBase<Milestone, MilestoneUpdateData>

@if (buffer is { })
{
    <Offcanvas @ref="currentModal"
               Placement="MyOffcanvasPlacement.End" 
               Class="my-offcanvas my-offcanvas-right"
               OnClose="ShowCloseConfirm" >
               
        <EditForm Model="buffer" 
                  OnValidSubmit="SubmitAsync" 
                  @onkeydown="HandleKeyDown" >
            <FluentValidationValidator />
            <OffcanvasHeader Class="py-0" Style="padding-top: 20px !important;">
                <AutoGrowTextArea style="font-size: 20px; font-weight: 500;" ReadOnly="!CanEdit"
                    @bind-Value="buffer.Title" class="p-0 w-100" />
            </OffcanvasHeader>
            <FluentValidationMessage For="() => buffer.Title" class="ms-3" />
            <OffcanvasBody Class="d-flex flex-column gap-2">     
                <TimeRangeView Start="Start" End="buffer.Deadline" />
                <FluentDatePicker Placeholder="Не установлен"
                    ReadOnly="!CanEdit" @bind-Value="buffer.Deadline" Label="Крайний срок:" />
                <FluentValidationMessage For="() => buffer.Deadline" />

                <FluentAutocomplete TOption="UserInfo" MaximumSelectedOptions="1" Disabled="!CanEdit"
                    @bind-SelectedOptions="SelectedResponsible" Context="user" AutoComplete="off"
                    OnOptionsSearch="OnSearchResponsible" Placeholder="Не установлен">

                    <LabelTemplate>
                        Ответственный
                        <FluentIcon Value="@(new Icons.Regular.Size20.Person())" Style="margin: 0 4px;" />
                    </LabelTemplate>

                    <SelectedOptionTemplate>
                        <FluentPersona Name="@user.DisplayName" 
                                       ImageSize="22px"
                                       Class="p-1"
                                       Style="height: 26px; background: var(--main-responsibles-bg)"
                                       Image="@($"onlyoffice/api/people{user.AvatarSmall}")" />
                    </SelectedOptionTemplate>

                    <OptionTemplate>
                        <FluentPersona Name="@user.DisplayName"
                                       ImageSize="22px"
                                       Image="@($"onlyoffice/api/people{user.AvatarSmall}")" />
                    </OptionTemplate>

                    <HeaderContent>
                        <FluentLabel Color="Color.Accent"
                            Style="padding: 8px; font-size: 11px; border-bottom: 1px solid var(--neutral-fill-stealth-hover);">
                            Команда проекта
                        </FluentLabel>
                    </HeaderContent>

                    <FooterContent>
                        @if (!user.Any())
                        {
                            <FluentLabel Style="font-size: 11px; text-align: center; width: 200px;">
                                Нет результатов
                            </FluentLabel>
                        }
                    </FooterContent>
                </FluentAutocomplete>
                <FluentValidationMessage For="() => buffer.Responsible" />

                <AutoGrowTextArea Resize="TextAreaResize.Vertical" Placeholder="Описание" Class="w-100 mb-2"
                    @bind-Value="buffer.Description" Spellcheck="true" ReadOnly="!CanEdit" />

                @if (!IsAdd)
                {
                    <CascadingValue Value="State" IsFixed="true">
                        <CascadingValue Value="ProjectHubClient" IsFixed="true">
                            <MelistoneShortTasks MilestoneTasks="@milestoneTasks" />
                        </CascadingValue>
                    </CascadingValue>
                }

                <div class="d-flex flex-row mt-2">

                    @if (!IsAdd && milestoneTasks.All(x => x.IsClosed()))
                    {
                        var isClosed = Model!.IsClosed();
                        Icon icon = isClosed ? new Icons.Filled.Size20.ArrowClockwise() : new Icons.Filled.Size20.CheckmarkCircle();

                        <FluentButton IconStart="icon" Appearance="Appearance.Lightweight"
                            @onclick="ToggleMilestonekStatus" >
                            @(isClosed ? "Открыть веху" : "Закрыть веху")
                        </FluentButton>
                    }

                    <FluentSpacer />

                    <FluentButton Disabled="!CanEdit" Type="ButtonType.Submit" >
                        @SubmitText
                    </FluentButton>

                    @if (!IsAdd)
                    {
                        <FluentButton Class="ms-2" Disabled="!Model!.CanDelete || State.ReadOnly"
                            OnClick="DeleteAsync" >
                            Удалить
                        </FluentButton>
                    }
                </div>
            </OffcanvasBody>
        </EditForm>
    </Offcanvas>
}

@code{
    private RenderFragment<UserInfo> UserInfoRenderFragment = u =>
        @<UserAvatar ShowName="true" User="@u" />;

    bool enterPressed;

    void HandleKeyDown(KeyboardEventArgs e)
    {
        enterPressed = e.Key == "Enter";
    }
}