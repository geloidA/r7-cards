@using Onlyoffice.Api.Models

@inherits AddEditModalBase<MilestoneUpdateData>

@inject TeamMemberSelectionDialog SelectionDialog

@using Offcanvas = Cardmngr.Components.Modals.MyBlazored.Offcanvas;

@if (buffer is { })
{
    <Cardmngr.Components.Modals.MyBlazored.Offcanvas Placement="MyOffcanvasPlacement.End" Class="my-offcanvas my-offcanvas-right" @ref="currentModal">
        <EditForm Model="buffer" OnValidSubmit="SubmitAsync" >
            <DataAnnotationsValidator/>
            <OffcanvasHeader Class="py-0" Style="padding-top: 20px !important;">
                <TitleChanger Disabled="!Model.CanEdit" @bind-Title="buffer.Title" />
            </OffcanvasHeader>
            <ValidationMessage For="() => buffer.Title" class="ms-3 validation-msg" />
            <OffcanvasBody Class="d-flex flex-column">
                <div class="mb-2" >
                    <WorkContainerDateProgress Work="buffer" />
                </div>
                <div class="d-flex justify-content-end">
                    <UserBadge User="buffer.Responsible" Title="Ответственный" OnClick="ShowResponsibleSelectionDialog" />
                </div>
                <ValidationMessage For="() => buffer.Responsible" class="validation-msg" />
                <Card class="p-1 mt-3">
                    <DateChanger Title="Крайний срок:" InputId="Deadline" Disabled="!Model.CanEdit" EmptyText="Не установлен" @bind-Date="buffer.Deadline" />
                    <ValidationMessage For="() => buffer.Deadline" class="validation-msg" />
                </Card>
                <DescriptionChanger Disabled="!Model.CanEdit" Class="mt-2" @bind-Description="buffer.Description" />
                @if (!IsAdd)
                {
                    <div class="mt-4">
                        <MelistoneShortTasks Milestone="Model" />
                    </div>
                }
                <div class="d-flex mt-2 flex-row">
                    <Button Loading="submiting" LoadingText="@LoadingText" 
                        Size="Size.Small" Disabled="!Model.CanEdit" Type="ButtonType.Submit" 
                        Color="ButtonColor.Success" Outline="true" >
                        @SubmitText
                    </Button>
                    @if (!IsAdd)
                    {
                        <Button class="ms-2" Size="Size.Small" Disabled="!Model.CanDelete" Color="ButtonColor.Danger"
                                @onclick="DeleteAsync" )
                                Outline="true" >
                                Удалить
                        </Button>
                    }
                </div>
            </OffcanvasBody>
        </EditForm>
    </Cardmngr.Components.Modals.MyBlazored.Offcanvas>
}

@code {
    private Offcanvas currentModal = null!;

    [Parameter] public ProjectState State { get; set; } = null!;

    private async Task SubmitAsync()
    {

    }

    private async Task DeleteAsync()
    {
        var answer = await ShowDeleteConfirm("Удаление вехи");

        if (answer.Confirmed)
        {
            
        }
    }
}