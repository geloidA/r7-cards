@using Milestone = Cardmngr.Domain.Entities.Milestone
@using Domain.Enums
@using Application.Clients.SignalRHubClients
@using Cardmngr.Shared.Utils.Filter

@inject AuthenticationStateProvider AuthenticationState

<div @onmouseenter="@(() => isHover = true)" @onmouseleave="@(() => isHover = false)" >
    <div class="w-100 overflow-hidden timeline-badge" BackgroundColor="@BadgeColor" 
        @onclick="() => ToggleMilestone(Milestone)" Fill="val">
        <div class="position-absolute hided-opt @CssShowOptions" 
            style="margin-left: 5px; width: 16px;">
            <FluentIcon Title="Фильтр по вехе" class="clickable"
                Value="@(new Icons.Filled.Size16.Eye())" Color="Color.Fill" />
        </div>
        <div title="@Milestone.Title" class="@CssSelected timeline-milestone" style="color: var(--fill-color);">
            @Milestone.Title
        </div>
    </div>
    <div class="d-flex justify-content-center hided-opt @CssShowOptions" >
        <div @onclick:preventDefault @onclick:stopPropagation>
            <FluentIcon class="clickable" @onclick="@ShowDetailsModal" 
                Value="@(new Icons.Filled.Size16.Info())" />
        </div>
    </div>
</div>

@code {
    private bool isHover;
    private string CssShowOptions => isHover ? "show-opt" : "";
    private string CssSelected => MilestoneTaskFilter.Contains(Milestone) ? "selected" : "";

    [CascadingParameter(Name = "DetailsModal")] ModalOptions Options { get; set; } = null!;
    [CascadingParameter] IModalService Modal { get; set; } = null!;
    [CascadingParameter] IProjectState State { get; set; } = null!;
    [CascadingParameter] ProjectHubClient ProjectHubClient { get; set; } = null!;
    [CascadingParameter] MilestoneTaskFilter MilestoneTaskFilter { get; set; } = null!;

    [Parameter] public Milestone Milestone { get; set; } = null!;

    void ToggleMilestone(Milestone milestone)
    {
        MilestoneTaskFilter.Toggle(Milestone);
        State.OnTasksChanged();
    }

    private string BadgeColor
    {
        get
        {
            if (Milestone.IsClosed()) return "green";
            return Milestone.IsDeadlineOut() ? "gray" : "orange";
        }
    }

    private async Task ShowDetailsModal()
    {
        var paramerters = new ModalParameters
        {
            { "Model", Milestone },
            { "State", State },
            { "ProjectHubClient", ProjectHubClient }
        };

        await Modal.Show<MilestoneDetailsModal>("", paramerters, Options).Result;
    }
}
