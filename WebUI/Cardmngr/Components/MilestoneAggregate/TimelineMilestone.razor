@using Milestone = Cardmngr.Domain.Entities.Milestone
@using Domain.Enums

@inject AuthenticationStateProvider AuthenticationState

<Badge class="p-0 w-100 overflow-hidden" @onclick="() => State.ToggleMilestone(Milestone)" Color="BadgeColor">
    <Tooltip Title="@Milestone.Title" Placement="TooltipPlacement.Right">
        <div class="@CssSelected p-1 timeline-milestone">
            @Milestone.Title
        </div>
    </Tooltip>
</Badge>

<div class="tool-bar d-flex justify-content-center" style="margin-top: -8px;">
    <Icon class="clickable" @onclick="ShowDetailsModal" Name="IconName.EyeFill" />
</div>

@code {
    private string CssSelected => State.SelectedMilestones.Contains(Milestone) ? "selected" : "";

    [CascadingParameter(Name = "DetailsModal")] ModalOptions Options { get; set; } = null!;
    [CascadingParameter] IModalService Modal { get; set; } = null!;
    [CascadingParameter] ProjectState State { get; set; } = null!;

    [Parameter] public Milestone Milestone { get; set; } = null!;

    private BadgeColor BadgeColor
    {
        get
        {
            if (Milestone.IsClosed()) return BadgeColor.Success;
            return Milestone.IsDeadlineOut() ? BadgeColor.Secondary : BadgeColor.Warning;
        }
    }

    private async Task ShowDetailsModal()
    {
        var paramerters = new ModalParameters
        {
            { "Model", Milestone },
            { "State", State }
        };

        await Modal.Show<MilestoneDetailsModal>("", paramerters, Options).Result;
    }
}
