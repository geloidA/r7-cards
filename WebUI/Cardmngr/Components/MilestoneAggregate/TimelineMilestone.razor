@using Milestone = Cardmngr.Domain.Entities.Milestone
@using Domain.Enums
@using Application.Clients.SignalRHubClients

@inject AuthenticationStateProvider AuthenticationState

<div @onmouseenter="@(() => isHover = true)" @onmouseleave="@(() => isHover = false)" >
    <Badge class="p-0 w-100 overflow-hidden" Color="BadgeColor" @onclick="() => State.ToggleMilestone(Milestone)" >
        <div class="position-absolute selection-opt hided-opt @CssShowOptions" style="margin-left: 5px; margin-top: 3.5px; width: 17px;">
            <Tooltip Title="Фильтр по вехе">
                <Icon class="clickable" Name="IconName.EyeFill" Color="IconColor.Dark" />
            </Tooltip>
        </div>
        <Tooltip Title="@Milestone.Title" Placement="TooltipPlacement.Right">
            <div class="@CssSelected p-1 timeline-milestone">
                @Milestone.Title
            </div>
        </Tooltip>
    </Badge>
    <div class="d-flex justify-content-center hided-opt @CssShowOptions" style="margin-top: -8px;">
        <div @onclick:preventDefault @onclick:stopPropagation>
            <Icon class="clickable" @onclick="ShowDetailsModal" Name="IconName.InfoCircleFill" />
        </div>
    </div>
</div>

@code {
    private bool isHover;
    private string CssShowOptions => isHover ? "show-opt" : "";
    private string CssSelected => State.SelectedMilestones.Contains(Milestone) ? "selected" : "";

    [CascadingParameter(Name = "DetailsModal")] ModalOptions Options { get; set; } = null!;
    [CascadingParameter] IModalService Modal { get; set; } = null!;
    [CascadingParameter] IProjectState State { get; set; } = null!;
    [CascadingParameter] ProjectHubClient ProjectHubClient { get; set; } = null!;

    [Parameter] public Milestone Milestone { get; set; } = null!;

    private BadgeColor BadgeColor
    {
        get
        {
            if (Milestone.IsClosed()) return BadgeColor.Success;
            return Milestone.IsDeadlineOut() ? BadgeColor.Secondary : BadgeColor.Warning;
        }
    }

    private async Task ShowDetailsModal()
    {
        var paramerters = new ModalParameters
        {
            { "Model", Milestone },
            { "State", State },
            { "ProjectHubClient", ProjectHubClient }
        };

        await Modal.Show<MilestoneDetailsModal>("", paramerters, Options).Result;
    }
}
