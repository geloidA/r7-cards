@inject AuthenticationStateProvider AuthenticationState
@inject NavigationManager NavigationManager
@inject ILocalStorageService LocalStorage
@inject IConfiguration Config

@using System.Text.Json

<FluentButton Class="py-0" style="margin-right: 20px;" Appearance="Appearance.Outline"
    OnClick="OpenSidebar" IconEnd="@(new Icons.Regular.Size20.TextAlignJustify())" />
<ProjectNavigator />
<FilterCustomizer />
<div style="flex-grow: 1;"></div>
<Toolbar />
<div class="ms-2"></div>
@if (currentUser is { })
{
    <FluentProfileMenu Initials="@($"{currentUser.LastName[0]}{currentUser.FirstName[0]}")" 
        Image="@($"{proxyUrl}/api/people{currentUser.AvatarSmall}")"
        OnHeaderButtonClick="LogoutAsync">
        <UserAvatar User="@currentUser" />
    </FluentProfileMenu>
    <FluentIcon class="ms-2"
        Value="@(new Icons.Regular.Size20.Settings())"
        />
}

@code {
    string proxyUrl = null!;
    private UserProfile? currentUser;

    [CascadingParameter(Name = "DetailsModal")] ModalOptions Options { get; set; } = null!;
    [CascadingParameter] IModalService Modal { get; set; } = null!;

    protected override void OnInitialized()
    {
        if (AuthenticationState is { })
        {
            proxyUrl = Config.CheckKey("proxy-url");
            var provider = AuthenticationState.ToCookieProvider();
            currentUser = JsonSerializer.Deserialize<UserProfile>(provider["Data"]);
        }
    }

    private async Task OpenSidebar()
    {
        await Modal.Show<HeaderMenuModal>("", new ModalParameters { { "Nothing", Enumerable.Empty<object>() } }, Options).Result;
            // TODO: ??? close animation only with parameter ???
    }

    async Task LogoutAsync()
    {
        if (AuthenticationState is { })
        {            
            AuthenticationState.ToCookieProvider().ClearAuthInfo();
            await LocalStorage.RemoveItemAsync("isauthenticated");
            NavigationManager.NavigateTo("login");
        }
    }
}
