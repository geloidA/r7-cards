@using BlazorComponentBus
@using Cardmngr.Components.ProjectAggregate.Contracts

@inject NavigationManager NavigationManager
@inject IProjectClient ProjectClient
@inject IComponentBus Bus

@inherits KolComponentBase
@implements IDisposable

@if (_currentProject is not null)
{
    <PageTitle>@_currentProject.Title</PageTitle>
    <div class="flex gap-1">
        <FluentIcon class="self-center" 
            @onmouseenter="() => isInfoIconHovered = true"
            @onmouseleave="() => isInfoIconHovered = false"
            Value="@InfoIcon" 
            OnClick="ShowProjectMenu" 
            Title="О проекте" />
        <div id="btn-pj-nav" 
             class="cursor-pointer"
             style="color: @CardmngrColors.Inverse;"
             @onclick="() => openPopover = !openPopover" >
            @_currentProject.Title
        </div>
    </div>

    <FluentPopover AnchorId="btn-pj-nav"
                   HorizontalPosition="HorizontalPosition.Center"
                   @bind-Open="openPopover"
                   class="my-popover popup-proj-nav scrollbar-none" >
        <Body>
            <ProjectNavigatorPopup Projects="projectsByIds.Values" OnProjectRefClick="() => openPopover = false" />
        </Body>
    </FluentPopover>
}

@code {
    bool isInfoIconHovered;
    bool openPopover;
    Dictionary<int, Project> projectsByIds = [];
    private Project? _currentProject;
    private static IProjectState? _projState;

    [CascadingParameter(Name = "DetailsModal")] ModalOptions Options { get; set; } = null!;
    [CascadingParameter] IModalService Modal { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        projectsByIds = (await ProjectClient
            .GetSelfProjectsAsync()
            .ToListAsync().ConfigureAwait(false))
            .ToDictionary(x => x.Id, x => x);
        
        Bus.SubscribeTo<ProjectStateChanged>(OnProjectStateChanged);

        UpdateStateByLocation(null, new LocationChangedEventArgs(NavigationManager.Uri, true));
        NavigationManager.LocationChanged += UpdateStateByLocation;
    }

    private void OnProjectStateChanged(ProjectStateChanged e)
    {
        _projState = e.State;
        StateHasChanged();
    }
    
    private async Task ShowProjectMenu()
    {
        var parameters = new ModalParameters 
        { 
            { "State", _projState }
        };
        await Modal.Show<ProjectDetailsModal>(parameters, Options).Result;
    }
    
    private Icon InfoIcon => isInfoIconHovered ? new Icons.Filled.Size16.Info() : new Icons.Regular.Size16.Info();

    private void UpdateStateByLocation(object? sender, LocationChangedEventArgs args)
    {
        if (!IsProjectUri(args.Location))
        {
            _currentProject = null;
            _projState = null;
        }
        else
        {
            _currentProject = projectsByIds[GetProjectIdFromUri(args.Location)];
        }

        StateHasChanged();
    }

    private static bool IsProjectUri(string uri) => uri.Contains("/project/");
    private static int GetProjectIdFromUri(string uri) => int.Parse(uri[(uri.IndexOf('=') + 1)..]);

    public void Dispose()
    {
        NavigationManager.LocationChanged -= UpdateStateByLocation;
        Bus.UnSubscribeFrom<ProjectStateChanged>(OnProjectStateChanged);
    }
}