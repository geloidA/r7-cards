@inject NavigationManager NavigationManager
@inject IProjectClient ProjectClient

@inherits KolComponentBase
@implements IDisposable

@if (ProjectInfo.SelectedProject is not null)
{
    <PageTitle>@ProjectInfo.SelectedProject.Title</PageTitle>
    <div class="flex gap-1">
        @if (ProjectInfo.OpenProjectInfoFunc is not null)
        {
            <FluentIcon class="self-center" 
                        @onmouseenter="() => isInfoIconHovered = true"
                        @onmouseleave="() => isInfoIconHovered = false"
                        Value="@InfoIcon" 
                        OnClick="ProjectInfo.OpenProjectInfoFunc" 
                        Title="О проекте" />
        }
        <div id="btn-pj-nav" 
             class="clickable"
             style="color: var(--neutral-fill-inverse-rest);"
             @onclick="() => openPopover = !openPopover" >
            @ProjectInfo.SelectedProject.Title
        </div>
    </div>

    <FluentPopover AnchorId="btn-pj-nav"
                   HorizontalPosition="HorizontalPosition.Center"
                   @bind-Open="openPopover"
                   class="my-popover popup-proj-nav scrollbar-none" >
        <Body>
            <ProjectNavigatorPopup Projects="projectsByIds.Values" OnProjectRefClick="() => openPopover = false" />
        </Body>
    </FluentPopover>
}

@code {
    bool isInfoIconHovered;
    bool openPopover;
    Dictionary<int, Project> projectsByIds = [];

    [CascadingParameter] HeaderInteractionService ProjectInfo { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        projectsByIds = (await ProjectClient
            .GetSelfProjectsAsync()
            .ToListAsync().ConfigureAwait(false))
            .ToDictionary(x => x.Id, x => x);

        ProjectInfo.SelectedProjectChanged += StateHasChanged;

        UpdateStateByLocation(null, new LocationChangedEventArgs(NavigationManager.Uri, true));
        NavigationManager.LocationChanged += UpdateStateByLocation;
    }
    
    private Icon InfoIcon => isInfoIconHovered ? new Icons.Filled.Size16.Info() : new Icons.Regular.Size16.Info();

    private void UpdateStateByLocation(object? sender, LocationChangedEventArgs args)
    {
        if (!IsProjectUri(args.Location))
        {
            ProjectInfo.CleanSelectedProject();
        }

        StateHasChanged();
    }

    private static bool IsProjectUri(string uri) => uri.Contains("/project/");

    public void Dispose()
    {
        NavigationManager.LocationChanged -= UpdateStateByLocation;
        ProjectInfo.SelectedProjectChanged -= StateHasChanged;
    }
}