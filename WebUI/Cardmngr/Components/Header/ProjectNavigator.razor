@inject NavigationManager NavigationManager
@inject IProjectClient ProjectClient

@inherits KolComponentBase
@implements IDisposable

@if (ProjectInfo.SelectedProject is { })
{
    <div class="d-flex">
        <FluentButton Id="btn-pj-nav" @onclick="() => openPopover = !openPopover" Appearance="Appearance.Outline" >
            @ProjectInfo.SelectedProject.Title
        </FluentButton>
        @if (ProjectInfo.OpenProjectInfoFunc is { })
        {
            <div class="d-flex gap-2 ms-2 align-items-center">
                <FluentIcon Value="@(new Icons.Filled.Size20.Info())" 
                    OnClick="ProjectInfo.OpenProjectInfoFunc" Title="О проекте" />
            </div>
        }
    </div>

    <FluentPopover Style="width: 500px; height: 150px; border-radius: 5px;" 
        AnchorId="btn-pj-nav" @bind-Open="openPopover" class="overflow-auto" >
        <Body>
            <FluentGrid Spacing="1">
                @foreach (var project in projectsByIds.Values)
                {
                    <FluentGridItem>
                        <FluentAnchor OnClick="() => openPopover = !openPopover" 
                            Appearance="Appearance.Stealth" title="@project.Title"
                            Style="max-width: 450px;" Class="overflow-hidden"
                            Href="@($"/project/{project.Id}")">
                            @project.Title
                        </FluentAnchor>
                    </FluentGridItem>
                }
            </FluentGrid>            
        </Body>
    </FluentPopover>
}

@code {
    bool openPopover;
    Dictionary<int, Project> projectsByIds = [];

    [CascadingParameter] HeaderInteractionService ProjectInfo { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        projectsByIds = (await ProjectClient
            .GetSelfProjectsAsync()
            .ToListAsync())
            .ToDictionary(x => x.Id, x => x);

        ProjectInfo.SelectedProjectChanged += StateHasChanged;

        UpdateStateByLocation(null, new LocationChangedEventArgs(NavigationManager.Uri, true));
        NavigationManager.LocationChanged += UpdateStateByLocation;
    }

    private void UpdateStateByLocation(object? sender, LocationChangedEventArgs args)
    {
        if (!IsProjectUri(args.Location))
        {
            ProjectInfo.CleanSelectedProject();
        }

        StateHasChanged();
    }

    private static bool IsProjectUri(string uri) => uri.Contains("/project/");

    public void Dispose()
    {
        NavigationManager.LocationChanged -= UpdateStateByLocation;
        ProjectInfo.SelectedProjectChanged -= StateHasChanged;
    }
}