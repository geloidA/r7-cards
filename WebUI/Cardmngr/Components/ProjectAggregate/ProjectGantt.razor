@using Cardmngr.Domain.Entities.Base
@using KolBlazor.Components.Charts.Data
@using KolBlazor.Components.Charts.Gantt
@using KolBlazor.Components.TreeGrid.Columns
@using Microsoft.AspNetCore.Components.Rendering

<div class="project-gantt">
    <GanttChart @ref="@_chart" 
        GetItems="GetItems"
        GetItem="GetItem"
        HighlightRoot="HighlightRoot"
        DayOffset="93"
        TreeGridNestMargin="10"
        OnItemClick="OnItemClicked"
        GetCustomClass="GetItemClass"
        OnItemExpandToggled="ItemExpandToggled"
        DetalizationLevel="@_detalizationLevel" >
        <Columns>
            <GridColumn TGridItem="GanttChartItem" Width="300px" >
                <HeaderTemplate>
                    Название
                </HeaderTemplate>
                <CellContent Context="item" >
                    @if (item.Data is IProjectState state)
                    {
                        <a class="font-semibold" href="@($"/project/board?ProjectId={state.Project.Id}")" 
                           title="@state.Project.Title">
                           @state.Project.Title
                        </a>
                    }
                    else if (item.Data is Milestone milestone)
                    {
                        <span class="font-semibold" title="@milestone.Title">@milestone.Title</span>
                    }
                    else if (item.Data is OnlyofficeTask task)
                    {
                        <span title="@task.Title">@task.Title</span>
                    }
                </CellContent>
            </GridColumn>
            <GridColumn TGridItem="GanttChartItem" Width="180px" >
                <HeaderTemplate>
                    <div class="flex gap-1 items-center">
                        <FluentIcon Value="@(new Icons.Regular.Size16.Calendar())" Color="Color.Info" />
                        Период
                    </div>
                </HeaderTemplate>
                <CellContent Context="item" >
                    @if (item.Start != null || item.End != null)
                    {
                        <DateRangeView StartReadOnly EndReadOnly
                            Start="item.Start"
                            StartDateRender="RenderStart"
                            EndDateRender="date => RenderEnd((date, item.Data))"
                            End="item.End" />
                    }
                    else
                    {
                        <span>–</span>
                    }
                </CellContent>
            </GridColumn>
            <GridColumn TGridItem="GanttChartItem" Width="100px" >
                <HeaderTemplate>
                    <div class="flex gap-1 items-center">
                        <FluentIcon Value="@(new Icons.Regular.Size16.Status())" Color="Color.Info" />
                        Статус
                    </div>
                </HeaderTemplate>
                <CellContent Context="item" >
                    @if (item.Data is OnlyofficeTask task)
                    {
                        var state = Multiple ? StateFinder!.Find(task) : State!;
                        <TaskStatusView
                            Task="task"
                            State="state"
                            Disabled="@(!task.CanEdit)" />
                    }
                </CellContent>
            </GridColumn>
        </Columns>
        <ItemTemplate Context="item" >
            @switch (item.Data)
            {
                case OnlyofficeTask task:
                    @RenderTask(task)
                    break;
                case Milestone milestone:
                    @RenderMilestone((milestone, item))
                    break;
                case IProjectState project:
                    @RenderProject(project)
                    break;
            }
        </ItemTemplate>
        <RightItemTemplate Context="item">
            @switch (item.Data)
            {
                case OnlyofficeTask task:
                    @RenderTaskRightPart(task)
                    break;
                case Milestone milestone:
                    @RenderMilestoneRightPart(new(milestone, item.Start, item.End))
                    break;
                case IProjectState project:
                    @RenderProjectRightPart(new(project, item.Start, item.End))
                    break;
            }
        </RightItemTemplate>
        <LeftItemTemplate Context="item">
            @switch (item.Data)
            {
                case Milestone milestone:
                    @RenderMilestoneLeftPart((milestone, item.Children
                        .Select(x => x.Data)
                        .Cast<OnlyofficeTask>()))
                    break;
                case OnlyofficeTask task:
                    @RenderTaskLeftPart(task)
                    break;
            }
        </LeftItemTemplate>
    </GanttChart>
    <div class="gantt-toolbar">
        <Button Class="rounded-lg font-bold text-forground-on-accent duration-400 py-1 px-2 bg-accent" @onclick="ScrollToToday" >Сегодня</Button>
        <FluentSelect Multiple="false"
                      TOption="GanttDetalizationLevel"
                      Width="100px;"
                      OptionText="GetDetalizationLevelText"
                      Items="Enum.GetValues<GanttDetalizationLevel>()"
                      SelectedOption="_detalizationLevel"
                      SelectedOptionChanged="OnDetalizationLevelChanged" />
    </div>
</div>

@code {

    private RenderFragment<IProjectState> RenderProject = item => @<div class="h-full w-full overflow-hidden text-ellipsis" title="@item.Project.Title">
        <span class="font-bold whitespace-nowrap ml-2">@item.Project.Title</span>
        <div class="work-item project"></div>
    </div>;

    private RenderFragment<GanttItem<IProjectState>> RenderProjectRightPart = item => @<div class="item-right-part mt-1">
        <DateRangeView StartReadOnly EndReadOnly
            Start="item.Start"
            Class="text-xs opacity-0 group-hover:opacity-100 transition-opacity duration-300"
            StartDateRender="RenderStart"
            EndDateRender="date => RenderEnd((date, item.Data))"
            End="item.End" />
    </div>;

    @* Task renders *@

    private RenderFragment RenderTask(OnlyofficeTask task)
    {
        var bgColor = task.IsClosed() 
            ? "done" 
            : task.IsDeadlineOut() 
                ? "deadline" 
                : task.IsSevenDaysDeadlineOut() 
                    ? "warning" 
                    : task.GetSmartDeadline() is null 
                        ? "unknown" : "";

        return @<Smooth class="w-full h-full" ShowOnFirstRender Delay="TimeSpan.FromMilliseconds(500)">
            <div class="work-item task @bgColor">
                @if (task.Priority == Priority.High)
                {
                    <FluentIcon Value="@(new Icons.Filled.Size16.Flag())" 
                        Style="min-width: 16px;"
                        title="Высокий приоритет" 
                        CustomColor="rgb(253, 186, 116)"
                        Color="Color.Custom" />
                }
            </div>
        </Smooth>;        
    }

    private RenderFragment<OnlyofficeTask> RenderTaskRightPart = task => @<div
        class="item-right-part flex gap-3 text-info items-center">
        @{ var topOffset = "mt-[5px]"; }
        @if (task.Responsibles.Count > 0)
        {
            var max = 2;
            <div class="gap-1 flex">
                @foreach (var user in task.Responsibles)
                {
                    if (max-- == 0) break;
                    <UserAvatar User="user" Size="20" ShowTooltip />
                }
                @if (max < 0)
                {
                    <span class="@topOffset">+@(task.Responsibles.Count - 2)</span>
                }
            </div>
            <span>|</span>
            topOffset = "";
        }
        <div class="hover:max-w-max max-w-[200px] overflow-hidden text-ellipsis whitespace-nowrap @topOffset">@task.Title</div>        
    </div>;

    private RenderFragment<OnlyofficeTask> RenderTaskLeftPart = task => @<div
        class="absolute w-max mt-[5px]"
        style="right: calc(100% + 5px);">
        @if (task.IsClosed())
        {
            <FluentIcon Value="@(new Icons.Regular.Size20.CheckmarkCircle())" Width="16px" Color="Color.Success" />
        }
        else if (task.IsDeadlineOut())
        {
            <FluentIcon Value="@(new Icons.Regular.Size20.Fire())" 
                Width="16px" Color="Color.Error" title="Срок истек" />
        }
        else if (task.IsSevenDaysDeadlineOut())
        {
            <FluentIcon Value="@(new Icons.Regular.Size20.Warning())" 
                Width="16px" Color="Color.Warning" title="Срок скоро истечет" />
        }
    </div>;

    @* Milestone render *@
    private RenderFragment<(Milestone milestone, GanttChartItem item)> RenderMilestone = data => 
        @<div class="work-item milestone" title="@data.milestone.Title">
            @if (data.item.IsExpanded)
            {
                <div class="milestone-bg cursor-auto" @onclick:stopPropagation style="height: @(data.item.Children.Count * 46 + 23)px;"></div> 
            } 
        </div>;

    private RenderFragment<(Milestone milestone, IEnumerable<OnlyofficeTask> tasks)> RenderMilestoneLeftPart = item => @<div 
        class="w-max text-xs gap-[2px] flex absolute mt-1"
        style="right: calc(100% + 5px);">
        @if (item.tasks.Any())
        {
            if (item.milestone.IsDeadlineOut())
            {
                <FluentIcon Value="@(new Icons.Regular.Size20.Fire())" Width="12px" Color="Color.Error" title="Срок истек" />
            }
            else if (item.milestone.IsClosed())
            {
                <FluentIcon Value="@(new Icons.Regular.Size20.CheckmarkCircle())" Width="12px" Color="Color.Success" title="Закрыта" />
            }
            else
            {
                <FluentIcon Value="@(new Icons.Regular.Size20.PlayCircleHint())" Width="12px" Color="Color.Accent" title="В работе" />
            }
            @($"{item.tasks.Count(x => x.Status == Status.Closed)} / {item.tasks.Count()}")
        }
    </div>;

    private RenderFragment<GanttItem<Milestone>> RenderMilestoneRightPart = item => @<div class="milestone-right-part mt-[5px]">
        <span class="hover:max-w-max max-w-[200px] overflow-hidden text-ellipsis whitespace-nowrap text-info">@item.Data.Title</span>
        <DateRangeView StartReadOnly EndReadOnly
            Start="item.Start"
            Class="text-xs opacity-0 group-hover:opacity-100 transition-opacity duration-300"
            StartDateRender="RenderStart"
            EndDateRender="date => RenderEnd((date, item.Data))"
            End="item.End" />            
    </div>;

    private static RenderFragment<DateTime?> RenderStart = date => @<div>
        @if (!date.HasValue)
        {
            <span class="italic text-info" title="Не установлен">???</span>
        }
        else
        {
            <span>@date.Value.ToShortYearString()</span>
        }
    </div>;

    private static RenderFragment<(DateTime? dt, object? data)> RenderEnd = (tuple) => @<div>
        @{
            var dt = tuple.dt;
            var data = tuple.data;
        }
        @if (!dt.HasValue)
        {
            <span class="italic text-info" title="Не установлен">???</span>
        }
        else
        {
            var task = data as IOnlyofficeTask;   
            <span class="flex gap-1">
                @if (task?.IsDeadlineOut() == true)
                {
                    <FluentIcon Value="@(new Icons.Regular.Size16.Fire())" Color="Color.Error" title="Срок просрочен" />
                    <span class="text-error" >@dt.Value.ToShortYearString()</span>
                }
                else if (task?.IsSevenDaysDeadlineOut() == true)
                {
                    <FluentIcon Value="@(new Icons.Filled.Size16.Warning())" 
                                Color="Color.Warning"
                                title="Срок скоро истечет" />
                    <span class="text-warning">@dt.Value.ToShortYearString()</span>
                }
                else
                {
                    <span>@dt.Value.ToShortYearString()</span>
                }
            </span>
        }
    </div>;

    private record GanttItem<T>(T Data, DateTime? Start, DateTime? End);
}
