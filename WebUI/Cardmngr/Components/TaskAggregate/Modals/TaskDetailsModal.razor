@using Onlyoffice.Api.Models
@using Onlyoffice.Api.Validations

@inherits AddEditModalBase<OnlyofficeTask, TaskUpdateData>

<CascadingValue Value="Buffer" IsFixed >
<CascadingValue Value="State" IsFixed >

<Offcanvas @ref="currentModal" 
           Width="550" 
           Placement="MyOffcanvasPlacement.End" 
           Class="my-offcanvas round"
           OnClose="ShowCloseConfirm" >

    <FluentEditForm Model="Buffer" OnValidSubmit="SubmitAsync" @onkeydown="HandleKeyDown" >
        <FluentValidationValidator />
        <OffcanvasHeader Class="flex flex-col gap-1">
            @if (!IsAdd)
            {
                <StatusBar Created="Model?.Created" 
                        Updated="Model?.Updated"/>
            }
            <AutoGrowTextArea Name="Title" 
                              ReadOnly="!CanEdit"
                              Autofocus="IsAdd"
                              @bind-Value="Buffer.Title" 
                              Class="p-0 w-full font-bold text-xl" />
        </OffcanvasHeader>
        <FluentValidationMessage For="() => Buffer.Title" class="ms-3" />
        <OffcanvasBody Class="flex flex-col form-group gap-3 h-fit">
            <div class="flex flex-col gap-2">
                <Markdown @bind-Text="Buffer.Description" 
                          @bind-IsEdit="_isDescriptionEditting"
                          Disabled="!CanEdit" 
                          DisabledPlaceholder="У этой задачи нет описания"
                          Placeholder="Добавьте описание, чтобы ответственным было понятно, что нужно сделать в этой задаче" />
                <div class="flex gap-4">
                    @if (!IsAdd)
                    {
                        @RenderSubtaskTool
                    }
                </div>
            </div>
            <DetailsCategory Open="true" Class="text-sm" Header="Параметры" >
                <Content>
                    <div class="flex flex-col gap-5">
                        <InfoItem Icon="new Icons.Filled.Size20.Status()"
                                Title="Статус">
                            <Content>
                                <TaskStatusView State="State" 
                                    TaskStatus="((IOnlyofficeTask)Buffer).Status"
                                    @bind-TaskStatusId="Buffer.TaskStatusId"
                                    Disabled="@(State.ReadOnly || IsAdd || !Model!.CanEdit)" />
                            </Content>
                        </InfoItem>
                        @if (Model is not null)
                        {
                            <InfoItem Icon="new Icons.Filled.Size20.Person()"
                                    Title="Владелец">
                                <Content>
                                    <UserAvatar User="Model.CreatedBy"
                                                Class="text-xs"
                                                Size="20" 
                                                ShowName />
                                </Content>
                            </InfoItem>
                        }
                        <InfoItem Icon="new Icons.Filled.Size20.Calendar()"
                                Title="Даты">
                            <Content>
                                <DateRangeView StartReadOnly="!CanEdit" EndReadOnly="!CanEdit"
                                            @bind-Start="Buffer.StartDate" 
                                            @bind-End="Buffer.Deadline" 
                                            EndDateRender="DeadlineRender" />
                                <FluentValidationMessage For="() => Buffer.Deadline" />
                            </Content>
                        </InfoItem>
                        <InfoItem Title="Приоритет"
                                Icon="new Icons.Regular.Size20.TriangleDown()" >
                            <Content>
                                <TaskPriorityChanger Disabled="@(!CanEdit)" />
                            </Content>
                        </InfoItem>
                        <TaskResponsibles Disabled="!CanEdit" />
                        <TaskMilestone Disabled="!CanEdit" />
                        <TaskTagLabels @ref="_taskTagsLabels"
                                       OnlyofficeTask="Model" 
                                       Disabled="@(!CanEdit)" />
                    </div>
                </Content>
            </DetailsCategory>

            <div class="flex justify-end select-none">
                <div class="flex flex-row">
                    <FluentButton Type="ButtonType.Submit" Class="font-bold" Appearance="Appearance.Outline"
                                Disabled="@(State.ReadOnly || Model is { CanEdit: false })" Loading="submitting" >
                        @SubmitText
                    </FluentButton>
                    @if(!IsAdd)
                    {
                        <FluentButton Class="ms-2 font-bold" OnClick="DeleteAsync" 
                            BackgroundColor="@CardmngrColors.Error"
                            Color="white"
                            Disabled="!Model!.CanDelete || State.ReadOnly" >
                            Удалить
                        </FluentButton>
                    }
                </div>
            </div>
        </OffcanvasBody>
    </FluentEditForm>
</Offcanvas>

</CascadingValue>
</CascadingValue>

@code {
    bool enterPressed;

    void HandleKeyDown(KeyboardEventArgs e)
    {
        enterPressed = e.Key == "Enter";
    }

    private RenderFragment<DateTime?> DeadlineRender => date =>
        @<div>
            @if (!date.HasValue)
            {
                <span class="text-info italic">???</span>
            }
            else
            {
                <span class="flex gap-1">
                    @if (Model?.IsDeadlineOut(date) == true)
                    {                        
                        <FluentIcon Value="@(new Icons.Regular.Size16.Fire())" Color="Color.Error" title="Срок просрочен" />
                        <span class="text-error" >@date.Value.ToString("d MMM yyyy")</span>
                    }
                    else if (Model?.IsSevenDaysDeadlineOut(date) == true)
                    {                        
                        <FluentIcon Value="@(new Icons.Filled.Size16.Warning())" 
                                    Color="Color.Warning"
                                    title="Срок скоро истечет" />
                        <span class="text-warning">@date.Value.ToString("d MMM yyyy")</span>
                    }
                    else
                    {
                        <span>@date.Value.ToString("d MMM yyyy")</span>
                    }
                </span>
            }
        </div>;

    private RenderFragment RenderSubtaskTool =>
        @<div class="w-full">
            @if (_showSubtasks || Model?.Subtasks.Count > 0)
            {
                <DetailsCategory @bind-Open="_isSubtasksOpen" >
                    <HeaderTemplate Context="open" >
                        <div class="flex group items-center select-none mb-1">
                            <div class="font-bold flex gap-1 text-sm cursor-pointer">
                                Подзадачи
                                @if (open)
                                {
                                    <FluentIcon Value="@(new Icons.Filled.Size16.ChevronUp())" Color="Color.FillInverse" />
                                }
                                else
                                {
                                    <FluentIcon Value="@(new Icons.Filled.Size16.ChevronDown())" Color="Color.FillInverse" />
                                }
                            </div>
                            <FluentSpacer />
                            @if (Model?.Subtasks.Count > 0 && CanEdit)
                            {
                                <Button Title="Удалить все подзадачи"
                                        @onclick="DeleteAllSubtasksAsync"
                                        class="group-hover:opacity-100 opacity-0 p-1 rounded-lg hover:bg-neutral-fill-hover" >
                                    <FluentIcon Value="@(new Icons.Filled.Size16.Delete())" Color="Color.Info" />
                                </Button>
                            }
                        </div>
                        <SubtaskProgressBar Task="Model" Class="mb-2" />
                    </HeaderTemplate>
                    <Content>
                        <CascadingValue Value="Model" IsFixed >
                            <TaskSubtasks />
                        </CascadingValue>
                    </Content>
                </DetailsCategory>
            }
            else if (Model?.IsClosed() == false && CanEdit)
            {
                <div class="flex gap-1 px-2 py-1 rounded-lg text-xs select-none w-fit hover:bg-neutral-fill-hover transition-colors cursor-pointer text-info" 
                        @onclick="StartSubtaskAdding">
                    <FluentIcon Value="@(new Icons.Regular.Size16.CheckboxChecked())" Color="Color.Info" />
                    <span>Добавить подзадачи</span>
                </div>
            }
        </div>;
}