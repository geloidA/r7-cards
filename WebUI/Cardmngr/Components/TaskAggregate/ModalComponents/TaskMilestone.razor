@using Onlyoffice.Api.Models

<FluentAutocomplete @ref="MilestoneList"
        TOption="Milestone" Width="487px"
        Disabled="Disabled" AutoComplete="off"
        MaximumSelectedOptions="1" MaximumOptionsSearch="100"
        SelectedOptions="SelectedMilestone"
        SelectedOptionsChanged="OnSelectionChanged"
        OnOptionsSearch="OnSearch"
        Placeholder="Нет" >

    <LabelTemplate>
        Веха 
        <FluentIcon Value="@(new Icons.Regular.Size20.Star())" Style="margin: 0 4px;" />
    </LabelTemplate>

    <SelectedOptionTemplate>
        <FluentBadge Appearance="Appearance.Accent">
            @context.Title
        </FluentBadge>
    </SelectedOptionTemplate>

    <MaximumSelectedOptionsMessage>
        Задача может принадлежать только одной вехе
    </MaximumSelectedOptionsMessage>

    <OptionTemplate>
        <FluentBadge Appearance="Appearance.Accent">
            @context.Title
        </FluentBadge>
    </OptionTemplate>

    <HeaderContent>
        <FluentLabel Color="Color.Accent"
            Style="padding: 8px; font-size: 11px; border-bottom: 1px solid var(--neutral-fill-stealth-hover);">
            Вехи проекта
        </FluentLabel>
    </HeaderContent>

    <FooterContent>
        @if (!context.Any())
        {
            <FluentLabel Style="font-size: 11px; text-align: center; width: 200px;">
                Нет результатов
            </FluentLabel>
        }
    </FooterContent>

</FluentAutocomplete>

@code {
    FluentAutocomplete<Milestone> MilestoneList = default!;
    IEnumerable<Milestone> SelectedMilestone = [];

    [CascadingParameter] TaskUpdateData Task { get; set; } = null!;    
    [CascadingParameter] IProjectState State { get; set; } = null!;
    [Parameter] public bool Disabled { get; set; }

    protected override void OnInitialized()
    {
        var selected = State.Milestones.SingleOrDefault(x => x.Id == Task.MilestoneId);
        if (selected is { })
        {
            SelectedMilestone = [selected];
        }
    }

    void OnSelectionChanged(IEnumerable<Milestone> e)
    {
        Task.MilestoneId = e.Any() ? e.Single().Id : null;
        SelectedMilestone = e;
    }

    void OnSearch(OptionsSearchEventArgs<Milestone> e)
    {
        e.Items = State.Milestones
            .Where(x => x.Title.Contains(e.Text, StringComparison.OrdinalIgnoreCase))
            .OrderBy(m => m.Title);
    }
}
