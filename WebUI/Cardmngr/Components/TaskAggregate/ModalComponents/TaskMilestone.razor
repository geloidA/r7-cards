@using Onlyoffice.Api.Models

<Card >
    <CardBody class="d-flex flex-column">
        <CardTitle>
            <div class="row d-flex align-items-center">
                <div class="col"> 
                    <Icon Name="IconName.Star" />
                    Веха
                </div>
                <div class="col d-flex justify-content-end">
                    <Tool Disabled="@Disabled" IconName="IconName.Pencil" IconSize="IconSize.x6"
                        TooltipTitle="Изменить" OnClick="@ShowSelectionModalAsync" />
                    <div class="ms-3">
                        <Tool Disabled="@(Disabled || Task.MilestoneId == null)" IconName="IconName.X" IconSize="IconSize.x6"
                            TooltipTitle="Удалить" OnClick="@DeleteMilestone" />
                    </div>
                </div>
            </div>
        </CardTitle>
        @if (Task.MilestoneId is { })
        {
            <div>
                <MilestoneLabel Milestone="@(State.GetMilestone(Task.MilestoneId))" />
            </div>
        }
        else
        {
            <span class="text-secondary">Вне вехи</span>
        }
    </CardBody>
</Card>

@code {

    [CascadingParameter] ProjectState State { get; set; } = null!;
    [CascadingParameter(Name = "MiddleModal")] ModalOptions ModalOptions { get; set; } = null!;
    [CascadingParameter] IModalService Modal { get; set; } = null!;

    [Parameter] public TaskUpdateData Task { get; set; } = null!;
    [Parameter] public bool Disabled { get; set; }

    private async Task ShowSelectionModalAsync()
    {
        var parameters = new ModalParameters
        {
            { "Items", State.Model!.Milestones },
            { "ItemRender", RenderMilestone }
        };

        var res = await Modal.Show<SelectionModal<Milestone>>("Выберите веху", parameters, ModalOptions).Result;

        if (res.Confirmed)
        {
            var milestone = (Milestone)res.Data!;
            Task.MilestoneId = milestone.Id;
        }
    }

    private void DeleteMilestone()
    {
        Task.MilestoneId = null;
    }

    private static RenderFragment<Milestone> RenderMilestone = milestone =>
        @<div class="py-1 px-1 d-flex align-items-center">
            <Badge Color="BadgeColor.Warning" IndicatorType="BadgeIndicatorType.RoundedPill"
                style="max-width: 425px; overflow: hidden;">
                @milestone.Title
            </Badge>
        </div>;
}
