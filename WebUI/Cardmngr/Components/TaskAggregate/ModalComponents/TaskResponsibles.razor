@using System.Collections.ObjectModel
@using Onlyoffice.Api.Models

<Card >
    <CardBody class="d-flex flex-column" style="overflow-y: scroll; max-height: 200px;">
        <CardTitle>
            <div class="row d-flex align-items-center">
                <div class="col-md-11 fs-6"> 
                    <Icon Name="IconName.PeopleFill" />
                    Ответственные
                </div>
                <div class="col-md-1 d-flex justify-content-end">
                    <Tool Disabled="@Disabled" IconName="@IconName.Pencil" IconSize="@IconSize.x6"
                        TooltipTitle="Изменить" OnClick="@ShowResponsibleSelectionModal" />
                </div>
            </div>
        </CardTitle>
        <UserList Users="@responsibles" />
    </CardBody>
</Card>


@code {
    [CascadingParameter] IProjectState State { get; set; } = null!;
    [CascadingParameter(Name = "MiddleModal")] ModalOptions ModalOptions { get; set; } = null!;

    [CascadingParameter] IModalService Modal { get; set; } = default!;

    [Inject] IUserClient UserClient { get; set; } = null!;

    [Parameter] public TaskUpdateData Task { get; set; } = null!;
    [Parameter] public bool Disabled { get; set; }
    
    private List<UserInfo> responsibles = [];

    protected override async Task OnInitializedAsync()
    {
        await foreach (var responsible in ConvertToResponsiblesAsync(Task.Responsibles))
        {
            responsibles.Add(responsible);
        }
    }

    private async IAsyncEnumerable<UserInfo> ConvertToResponsiblesAsync(IEnumerable<string> ids)
    {
        foreach (var id in ids)
        {
            var participant = State.Model!.Team.FirstOrDefault(p => p.Id == id);
            if (participant is { })
            {
                yield return participant;
            }
            else
            {
                yield return await UserClient.GetUserProfileByIdAsync(id);
            }
        }
    }

    private async Task ShowResponsibleSelectionModal()
    {
        var parameters = new ModalParameters
        {
            { "SelectedIds", Task.Responsibles },
            { "Responsibles", State.Model!.Team }
        };

        var result = await Modal.Show<ResponsiblesSelectionModal>("Выберите ответственных", parameters, ModalOptions).Result;

        if (result.Confirmed)
        {
            var users = (IEnumerable<string>)result.Data!;
            Task.Responsibles = users.ToList();
            
            responsibles.Clear();
            await foreach (var responsible in ConvertToResponsiblesAsync(Task.Responsibles))
            {
                responsibles.Add(responsible);
            }
        }
    }
}