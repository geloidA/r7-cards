@using Onlyoffice.Api.Models

<FluentAutocomplete @ref="responsibleList"
    TOption="UserInfo" AutoComplete="off"
    Disabled="Disabled" MaximumOptionsSearch="100"
    OptionStyle="min-height: 40px;"
    OnOptionsSearch="OnSearch"
    SelectedOptions="selectedResponsibles"
    SelectedOptionsChanged="SelectedChanged"
    Placeholder="Нет" >

    <LabelTemplate>
        Ответственные 
        <FluentIcon Value="@(new Icons.Regular.Size20.Person())" Style="margin: 0 4px;" />
    </LabelTemplate>

    <SelectedOptionTemplate>
        <FluentPersona Name="@context.DisplayName" 
            ImageSize="22px"
            Class="p-1"
            Style="height: 26px; background: var(--main-responsibles-bg)"
            Image="@($"onlyoffice/api/people{context.AvatarSmall}")"
            OnDismissClick="@(async () => await responsibleList.RemoveSelectedItemAsync(context).ConfigureAwait(false))"/>
    </SelectedOptionTemplate>

    <OptionTemplate>
        <FluentPersona Name="@context.DisplayName"
            ImageSize="22px"
            Image="@($"onlyoffice/api/people{context.AvatarSmall}")" />
    </OptionTemplate>

    <HeaderContent>
        <FluentLabel Color="Color.Accent"
            Style="padding: 8px; font-size: 11px; border-bottom: 1px solid var(--neutral-fill-stealth-hover);">
            Команда проекта
        </FluentLabel>
    </HeaderContent>

    <FooterContent>
        @if (!context.Any())
        {
            <FluentLabel Style="font-size: 11px; text-align: center; width: 200px;">
                Нет результатов
            </FluentLabel>
        }
    </FooterContent>
</FluentAutocomplete>

@code {
    FluentAutocomplete<UserInfo> responsibleList = default!;
    IEnumerable<UserInfo> selectedResponsibles = [];
    [CascadingParameter] IProjectState State { get; set; } = null!;

    [CascadingParameter] TaskUpdateData Task { get; set; } = null!;
    [Parameter] public bool Disabled { get; set; }

    protected override void OnInitialized()
    {
        selectedResponsibles = State.Team.Where(x => Task.Responsibles.Any(id => id == x.Id));
    }

    void OnSearch(OptionsSearchEventArgs<UserInfo> e)
    {
        e.Items = State.Team
            .Where(x => x.DisplayName.Contains(e.Text, StringComparison.OrdinalIgnoreCase))
            .OrderBy(x => x.DisplayName);
    }

    void SelectedChanged(IEnumerable<UserInfo> users)
    {
        Task.Responsibles = users.Select(x => x.Id).ToList();
    }
}