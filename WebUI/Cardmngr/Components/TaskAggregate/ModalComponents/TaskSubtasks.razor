@using Onlyoffice.Api.Models
@using Cardmngr.Application.Clients.Subtask
@using AutoMapper

@inject KolTimelineJsInterop TimelineJsInterop
@inject IMapper Mapper

<div class="d-flex align-items-center fs-6">
    <FluentIcon Value="@(new Icons.Regular.Size24.Check())"/>
    <span class="ms-1" style="color: var(--neutral-foreground-rest);">Подзадачи</span>
    <Tool Icon="@(new Icons.Regular.Size16.Add())" Class="ms-1" TooltipTitle="Добавить"
        Disabled="@(!Task.CanEdit || Task.IsClosed())" @onclick="ShowCreationModal" />
</div>
@if (Task.Subtasks.Count == 0)
{
    <span>Список пуст</span>
}
<CascadingValue Value="hasEditingSubtask" >
    <div @ref="scrollElement" class="d-flex gap-1 overflow-auto scrollbar-none">
        @foreach (var subtask in Task.Subtasks)
        {
            var updateData = Mapper.Map<SubtaskUpdateData>(subtask);

            <SubtaskView Subtask="updateData" UpdateCallback="StateHasChanged"
                Disabled="!subtask.CanEdit" Id="subtask.Id"
                EditModeChanged="next => hasEditingSubtask = next"
                @key="subtask.Id" />
        }
    </div>
</CascadingValue>

@code {
    bool hasEditingSubtask;
    ElementReference scrollElement;

    [Inject] public ISubtaskClient SubtaskClient { get; set; } = null!;
    
    [CascadingParameter] OnlyofficeTask Task { get; set; } = null!;
    [CascadingParameter] IProjectState State { get; set; } = null!;
    [CascadingParameter(Name = "MiddleModal")] ModalOptions ModalOptions { get; set; } = null!;
    [CascadingParameter] IModalService Modal { get; set; } = default!;

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {            
            await TimelineJsInterop.RegisterScrollHandler(scrollElement);
        }
    }

    async Task ShowCreationModal()
    {
        var res = await Modal.Show<SubtaskCreationModal>("Добавление подзадачи", 
            new ModalParameters { { "Team", State.Team } }, ModalOptions).Result;

        if (res.Confirmed)
        {
            var data = (SubtaskUpdateData)res.Data!;
            var added = await SubtaskClient.CreateAsync(Task.Id, data);
            State.AddSubtask(Task.Id, added);
        }
    }
}
