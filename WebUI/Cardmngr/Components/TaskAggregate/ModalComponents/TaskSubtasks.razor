@using Onlyoffice.Api.Models
@using Cardmngr.Application.Clients.Subtask
@using AutoMapper

@implements IDisposable

@inject IMapper Mapper
@inject IJSRuntime JsRuntime

<div class="rounded-lg bg-layer-1 p-3">
    <div class="flex items-center text-xl mb-4">
        <FluentIcon Value="@(new Icons.Regular.Size20.Check())"/>
        <span class="ms-1 text-sm" style="color: var(--neutral-foreground-rest);">Подзадачи</span>
        <FluentSpacer />
        <Tool Icon="@(new Icons.Filled.Size24.AddSquare())" Class="ms-1" title="Создать подзадачу"
            Disabled="@(State.ReadOnly || !Task.CanEdit || Task.IsClosed())" @onclick="ShowCreationModal" />
    </div>
    @if (Task.Subtasks.Count == 0)
    {
        <span>Список пуст</span>
    }

    <div class="subtasks-list">
        @foreach (var subtask in Task.Subtasks.OrderBy(x => x.Status))
        {
            <SubtaskCard Subtask="subtask" />
        }
    </div>
</div>

@code {
    [Inject] public ISubtaskClient SubtaskClient { get; set; } = null!;

    [CascadingParameter] OnlyofficeTask Task { get; set; } = null!;
    [CascadingParameter] IProjectState State { get; set; } = null!;
    [CascadingParameter(Name = "MiddleModal")] ModalOptions ModalOptions { get; set; } = null!;
    [CascadingParameter] IModalService Modal { get; set; } = default!;

    protected override void OnInitialized()
    {
        State.SubtasksChanged += StateHasChanged;
    }

    async Task ShowCreationModal()
    {
        var res = await Modal.Show<SubtaskCreationModal>(new ModalParameters { { "Team", State.Team } }, ModalOptions).Result.ConfigureAwait(false);

        if (res.Confirmed)
        {
            var data = (SubtaskUpdateData)res.Data!;
            var added = await SubtaskClient.CreateAsync(Task.Id, data).ConfigureAwait(false);
            State.AddSubtask(Task.Id, added);
        }
    }

    public void Dispose()
    {
        State.SubtasksChanged -= StateHasChanged;
    }
}
