@using Onlyoffice.Api.Models

<Card>
    <CardBody style="max-height: 300px; min-height: 160px; overflow-y: scroll;">
        <CardTitle>
            <div class="d-flex align-items-center">
                <Icon Name="IconName.UiChecks" />
                <span class="ms-1">Подзадачи</span>
            </div>
        </CardTitle>
        @if (Task.Subtasks.Any())
        {
            <CascadingValue Value="hasEditingSubtask" >
                @foreach (var subtask in Task.Subtasks)
                {
                    var updateData = new SubtaskUpdateData 
                    { 
                        Status = (int)subtask.Status, 
                        Title = subtask.Title, 
                        Responsible = subtask.Responsible?.Id
                    };

                    <SubtaskView Subtask="updateData" UpdateCallback="StateHasChanged"
                        Disabled="!subtask.CanEdit" Id="subtask.Id"
                        EditModeChanged="next => hasEditingSubtask = next"
                        @key="subtask.Id" />
                }
            </CascadingValue>
        }
        else
        {
            <span class="text-secondary">Список пуст</span>
        }
    </CardBody>
    <CardFooter class="d-flex justify-content-end bg-main">
        <Tool IconName="@IconName.Plus" IconSize="@IconSize.x5" TooltipTitle="Добавить"
            Disabled="@(!Task.CanEdit || Task.IsClosed())" @onclick="ShowCreationModal" />
    </CardFooter>
</Card>

@code {
    private bool hasEditingSubtask;
    
    [CascadingParameter] OnlyofficeTask Task { get; set; } = null!;
    [CascadingParameter] ProjectState State { get; set; } = null!;
    [CascadingParameter(Name = "MiddleModal")] ModalOptions ModalOptions { get; set; } = null!;
    [CascadingParameter] IModalService Modal { get; set; } = default!;

    private async Task ShowCreationModal()
    {
        var res = await Modal.Show<SubtaskCreationModal>("Добавление подзадачи", 
            new ModalParameters { { "Team", State.Model!.Team } }, ModalOptions).Result;

        if (res.Confirmed)
        {
            var data = (SubtaskUpdateData)res.Data!;
            await State.AddSubtaskAsync(Task.Id, data);
        }
    }
}
