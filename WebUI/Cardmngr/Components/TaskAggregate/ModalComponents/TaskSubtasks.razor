@using Onlyoffice.Api.Models
@using Cardmngr.Application.Clients.Subtask
@using AutoMapper

@inject IMapper Mapper

<FluentCard style="max-height: 300px; min-height: 160px; overflow-y: scroll;">
    <CardTitle>
        <div class="d-flex align-items-center fs-6">
            <FluentIcon Value="@(new Icons.Regular.Size24.Check())"/>
            <span class="ms-1">Подзадачи</span>
        </div>
    </CardTitle>
    @if (Task.Subtasks.Any())
    {
        <CascadingValue Value="hasEditingSubtask" >
            @foreach (var subtask in Task.Subtasks)
            {
                var updateData = Mapper.Map<SubtaskUpdateData>(subtask);

                <SubtaskView Subtask="updateData" UpdateCallback="StateHasChanged"
                    Disabled="!subtask.CanEdit" Id="subtask.Id"
                    EditModeChanged="next => hasEditingSubtask = next"
                    @key="subtask.Id" />
            }
        </CascadingValue>
    }
    else
    {
        <span>Список пуст</span>
    }
    <CardFooter class="d-flex justify-content-end bg-main">
        <Tool Icon="@(new Icons.Regular.Size20.Add())" TooltipTitle="Добавить"
            Disabled="@(!Task.CanEdit || Task.IsClosed())" @onclick="ShowCreationModal" />
    </CardFooter>
</FluentCard>

@code {
    private bool hasEditingSubtask;

    [Inject] public ISubtaskClient SubtaskClient { get; set; } = null!;
    
    [CascadingParameter] OnlyofficeTask Task { get; set; } = null!;
    [CascadingParameter] IProjectState State { get; set; } = null!;
    [CascadingParameter(Name = "MiddleModal")] ModalOptions ModalOptions { get; set; } = null!;
    [CascadingParameter] IModalService Modal { get; set; } = default!;

    private async Task ShowCreationModal()
    {
        var res = await Modal.Show<SubtaskCreationModal>("Добавление подзадачи", 
            new ModalParameters { { "Team", State.Model!.Team } }, ModalOptions).Result;

        if (res.Confirmed)
        {
            var data = (SubtaskUpdateData)res.Data!;
            var added = await SubtaskClient.CreateAsync(Task.Id, data);
            State.AddSubtask(Task.Id, added);
        }
    }
}
