@using Onlyoffice.Api.Models
@using Cardmngr.Application.Clients.Subtask

@implements IDisposable

<CascadingValue Value="this" IsFixed >
    <div class="flex flex-col gap-2">    
        @foreach (var subtask in Task.Subtasks.OrderBy(x => x.Status))
        {
            <SubtaskCard Subtask="subtask"
                         OnSubtaskInteractionChange="OnSubtaskInteractionChange"
                         @key="subtask" />
        }

        @if (_isAddMode)
        {
            <SubtaskCard Subtask="new Subtask { TaskId = Task.Id }" 
                         Class="border-accent border"
                         InteractionMode="InteractionMode.Add"
                         OnSubtaskInteractionChange="OnSubtaskInteractionChange" />
        }
        else if (!Task.IsClosed() && !State.ReadOnly)
        {
            <div class="rounded-lg p-2 select-none hover:bg-neutral-fill-hover transition-colors @CanAddSubtaskCss"
                @onclick="TurnOnAddingMode" >
                <div class="flex gap-1 rounded-lg px-2 py-1 w-fit text-xs hover:bg-neutral-hover transition-colors">
                    <FluentIcon Value="@(new Icons.Filled.Size12.Add())" />
                    Добавить подзадачу
                </div>
            </div>
        }
    </div>
</CascadingValue>

@code {
    private int? _editingSubtaskId;
    private bool _isAddMode;

    internal event Action<int>? NotifySubtaskStopEditing;

    private string CanAddSubtaskCss => _editingSubtaskId.HasValue ? "" : "cursor-pointer";

    [CascadingParameter] OnlyofficeTask Task { get; set; } = null!;
    [CascadingParameter] IProjectState State { get; set; } = null!;

    protected override void OnInitialized()
    {
        State.SubtasksChanged += StateHasChanged;
    }

    private void TurnOnAddingMode()
    {
        if (!_editingSubtaskId.HasValue)
        {
            _isAddMode = true;
        }
    }

    private void OnSubtaskInteractionChange(SubtaskInteraction interaction)
    {
        if (interaction.Mode == InteractionMode.Edit)
        {
            if (_editingSubtaskId.HasValue)
            {
                NotifySubtaskStopEditing?.Invoke(_editingSubtaskId.Value);
            }

            _editingSubtaskId = interaction.Id;
        }
        else
        {
            _editingSubtaskId = null;
        }

        _isAddMode = false;
    }

    public void Dispose()
    {
        State.SubtasksChanged -= StateHasChanged;
    }
}
