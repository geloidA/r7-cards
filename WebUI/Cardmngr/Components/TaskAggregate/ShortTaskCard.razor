@using System.Globalization
@using Cardmngr.Application.Clients.SignalRHubClients

@inject AuthenticationStateProvider AuthenticationStateProvider

<div class="short-task w-100 h-100 clickable" @onclick="ShowTaskDetails" >
    <div class="info-container">
        <div class="d-flex w-100 h-100">
            @if(Task.Responsibles.Any())
            {
                <UserAvatar ShowTooltip="true" 
                            User="Task.Responsibles.First()" />
            }
            <span class="ms-2 align-self-center">@Task.Title</span>
        </div>
        <div class="d-flex flex-column h-100 p-1">
            @if (Task.Priority == Domain.Enums.Priority.High)
            {
                <FluentIcon Value="@(new Icons.Filled.Size16.ArrowCircleUp())" 
                            Color="Color.Accent"
                            class="align-self-end" />
            }
            <FluentSpacer />
            <div class="d-flex gap-1">
                @if (Task.IsDeadlineOut())
                {
                    <FluentIcon Value="@(new Icons.Regular.Size16.Fire())" 
                                Color="Color.Error" />
                    <span class="text-danger" style="font-size: 14px;">@Task.Deadline?.ToShortDateString()</span>
                }
                else
                {
                    <span style="font-size: 14px;">@Task.Deadline?.ToShortDateString()</span>
                }
                @if (Task.IsClosed())
                {
                    <FluentIcon Value="@(new Icons.Filled.Size16.CheckmarkCircle())" 
                                Color="Color.Success" />
                }
            </div>
        </div>
        <div class="bg-progress" style="@CompleteProgress"></div>
    </div>
</div>

@code {
    [CascadingParameter(Name = "DetailsModal")] ModalOptions Options { get; set; } = null!;
    [CascadingParameter] IModalService Modal { get; set; } = null!;
    [CascadingParameter] IProjectState State { get; set; } = null!;

    [Parameter, EditorRequired] public OnlyofficeTask Task { get; set; } = null!;

    private string CompleteProgress
    {
        get
        {
            if (Task.IsClosed()) return "width: 100%;";
            if (Task.Subtasks.Count == 0) return "width: 0%;";
            var completePercentage = (Task.Subtasks.Count(x => x.Status == Status.Closed) * 100.0) / Task.Subtasks.Count;
            return $"width: {completePercentage.ToString(CultureInfo.InvariantCulture)}%;";
        }
    }

    private async Task ShowTaskDetails()
    {
        var parameters = new ModalParameters
        {
            { "Model", Task },
            { "State", State }
        };

        await Modal.Show<TaskDetailsModal>("", parameters, Options).Result.ConfigureAwait(false);
    }
}
