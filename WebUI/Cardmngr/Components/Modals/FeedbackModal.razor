@using System.Security.Claims

@inject ToastService ToastService
@inject IFeedbackService FeedbackService
@inject AuthenticationStateProvider AuthenticationStateProvider

<div class="container d-flex flex-column">
    <Card>
        <CardBody>
            <textarea placeholder="Что хотели бы добавить или изменить в приложении..." @bind="Text" @bind:event="oninput" 
                class="w-100 @InvalidInputCss" style="height: 250px; border: 0px;" />
        </CardBody>
        <CardFooter class="d-flex justify-content-end small">
            <span>@(Text?.Length ?? 0)</span>
            <span>/</span>
            <span>@MaxLength</span>
        </CardFooter>
    </Card>
    <div class="mt-2 d-flex w-100">
        <Button Loading="sending" Size="Size.Small" LoadingText="Отправка" @onclick="SendFeedback" Color="ButtonColor.Success" >
            <Icon Name="IconName.Send"></Icon>
            Отправить
        </Button>
        <div class="col d-flex justify-content-end">
            <Button Color="ButtonColor.Danger" Size="Size.Small" class="ms-2"
                @onclick="async () => await CurrentModal.CloseAsync()" >
                <Icon Name="IconName.XCircle"></Icon>
                Отмена
            </Button>
        </div>
    </div>
</div>

@code {    
    private string InvalidInputCss => isInvalidInput ? "h-text-area" : "";

    bool isInvalidInput;
    bool sending;

    private const int MaxLength = 300;

    private string? text;
    public string? Text 
    {
        get => text;
        set
        {
            if (value?.Length > MaxLength) return;
            text = value;
        }
    }
    
    [CascadingParameter] protected BlazoredModalInstance CurrentModal { get; set; } = default!;

    private async Task SendFeedback()
    {
        if (string.IsNullOrWhiteSpace(Text))
        {
            await HighliteTextArea(400);
            return;
        }

        if (AuthenticationStateProvider is { })
        {
            var name = await AuthenticationStateProvider.GetNameAsync();
            if (name is { })
            {
                var feedback = new Feedback(name, Text);

                sending = true;
                var statusCode = await FeedbackService.SendAsync(feedback);
                ToastService.Notify(GetToastMessage(statusCode));

                await CurrentModal.CloseAsync();
            }
        }
    }

    private static ToastMessage GetToastMessage(System.Net.HttpStatusCode code)
    {
        return code == System.Net.HttpStatusCode.OK
            ? new ToastMessage
                {
                    Type = ToastType.Success,
                    IconName = IconName.CheckCircleFill,
                    Title = "Обратная связь отправлена!",
                    Message = "Спасибо за обратную связь!",
                    AutoHide = true
                }
            : new ToastMessage
                {
                    Type = ToastType.Danger,
                    IconName = IconName.XCircleFill,
                    Title = "Ошибка!",
                    Message = "Что-то пошло не так :((",
                    AutoHide = true
                };
    }

    private async Task HighliteTextArea(int millisecondsDelay)
    {
        isInvalidInput = true;
        await Task.Delay(millisecondsDelay);
        isInvalidInput = false;
    }
}
