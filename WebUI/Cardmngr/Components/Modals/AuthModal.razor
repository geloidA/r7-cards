@using Onlyoffice.Api.Models.Authentication
@using Cardmngr.Validators

@inject IAuthApiLogic AuthApiLogic
@inject IToastService ToastService

<FluentEditForm Model="loginData" OnValidSubmit="SubmitAuth">
    <FluentValidationValidator />
    <FluentMessageBar AllowDismiss="false" Intent="@MessageIntent.Warning">
        Используйте учетные данные от Р7 Офис
    </FluentMessageBar>

    <div class="flex flex-col gap-6">
        <div class="flex flex-col">
            <FluentTextField id="UserName" @bind-Value="loginData.UserName" Placeholder="Почта" />
            <FluentValidationMessage For="() => loginData.UserName" />
        </div>

        <div class="flex flex-col">
            <FluentTextField id="Password" TextFieldType="@(showPassword ? TextFieldType.Text : TextFieldType.Password)"
                            @bind-Value="loginData.Password" Immediate Placeholder="Пароль">
                <FluentIcon Slot="end" Value="ShowPasswordIcon" 
                            @onclick="() => showPassword = !showPassword" />
            </FluentTextField>
            <FluentValidationMessage For="() => loginData.Password" />
        </div>

        <div class="flex justify-center">
            <FluentButton Type="ButtonType.Submit"
                        Loading="busy" >
                Войти
            </FluentButton>
        </div>
    </div>
</FluentEditForm>

@code {
    readonly LoginData loginData = new();
    bool showPassword;
    bool busy;

    Icon ShowPasswordIcon => showPassword ? new Icons.Regular.Size16.EyeOff() : new Icons.Regular.Size16.Eye();

    [CascadingParameter] BlazoredModalInstance BlazoredModal { get; set; } = default!;

    async Task SubmitAuth()
    {
        busy = true;
        var status = await AuthApiLogic.LoginAsync(new LoginModel(loginData.UserName, loginData.Password))
            .ConfigureAwait(false);
        if (status == AuthenticationResponseType.Error)
        {
            ToastService.ShowError("Ошибка авторизации");
        }
        else await BlazoredModal.CloseAsync(ModalResult.Ok(true)).ConfigureAwait(false);
        busy = false;
    }
}
