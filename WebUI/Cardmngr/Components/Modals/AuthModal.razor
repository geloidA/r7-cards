@using Onlyoffice.Api.Models.Authentication
@using Cardmngr.Validators

@inject IAuthApiLogic AuthApiLogic
@inject IToastService ToastService

<FluentEditForm Model="loginData" OnValidSubmit="SubmitAuth">
    <FluentValidationValidator />
    <FluentMessageBar AllowDismiss="false" Title="Внимание!" Intent="@MessageIntent.Warning">
        Используйте учетные данные от Р7 Офис
    </FluentMessageBar>

    <div class="flex flex-col mt-2">
        <FluentTextField id="UserName" @bind-Value="loginData.UserName" Label="Почта" />
        <FluentValidationMessage For="() => loginData.UserName" />
    </div>

    <div class="flex flex-col mt-4">
        <FluentTextField id="Password" TextFieldType="@(showPassword ? TextFieldType.Text : TextFieldType.Password)"
                         @bind-Value="loginData.Password" Label="Пароль" Immediate >
            <FluentIcon Slot="end" Value="ShowPasswordIcon" 
                        @onclick="() => showPassword = !showPassword" />
        </FluentTextField>
        <FluentValidationMessage For="() => loginData.Password" />
    </div>

    <div class="mt-2 flex justify-center">
        <FluentButton Type="ButtonType.Submit"
                      Loading="busy" >
            Войти
        </FluentButton>
    </div>        
</FluentEditForm>

@code {
    readonly LoginData loginData = new();
    bool showPassword;
    bool busy;

    Icon ShowPasswordIcon => showPassword ? new Icons.Regular.Size16.EyeOff() : new Icons.Regular.Size16.Eye();

    [CascadingParameter] BlazoredModalInstance BlazoredModal { get; set; } = default!;

    async Task SubmitAuth()
    {
        busy = true;
        var status = await AuthApiLogic.LoginAsync(new LoginModel(loginData.UserName, loginData.Password))
            .ConfigureAwait(false);
        if (status == AuthenticationResponseType.Error)
        {
            ToastService.ShowError("Ошибка авторизации");
        }
        else await BlazoredModal.CloseAsync(ModalResult.Ok(true)).ConfigureAwait(false);
        busy = false;
    }
}
