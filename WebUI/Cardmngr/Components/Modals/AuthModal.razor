@using Onlyoffice.Api.Models.Authentication
@using Cardmngr.Validators

@inject IAuthApiLogic AuthApiLogic
@inject IToastService ToastService

@if (loginData is { })
{
    <FluentEditForm Model="loginData" OnValidSubmit="SumbitAuth">
        <FluentValidationValidator />
        <FluentMessageBar AllowDismiss="false" Title="Внимание!" Intent="@MessageIntent.Warning">
            Используйте учетные данные от Р7 Офис
        </FluentMessageBar>

        <div class="d-flex flex-column mt-2">
            <FluentTextField id="UserName" @bind-Value="loginData.UserName" Label="Почта / Логин" />
            <FluentValidationMessage For="() => loginData.UserName" />
        </div>

        <div class="d-flex flex-column mt-4">
            <FluentTextField id="Password" TextFieldType="TextFieldType.Password"
                 @bind-Value="loginData.Password" Label="Пароль" />
            <FluentValidationMessage For="() => loginData.Password" />
        </div>

        <div class="mt-2 d-flex justify-content-center">
            <FluentButton Type="ButtonType.Submit"
                Loading="busy" >
                Войти
            </FluentButton>
        </div>        
    </FluentEditForm>
}

@code {
    readonly LoginData loginData = new();
    bool busy;
    
    [CascadingParameter] BlazoredModalInstance BlazoredModal { get; set; } = default!;

    async Task SumbitAuth()
    {
        busy = true;
        var status = await AuthApiLogic.LoginAsync(new LoginModel(loginData.UserName, loginData.Password));
        if (status == AuthenticationResponseType.Error)
        {
            ToastService.ShowError("Ошибка авторизации");
        }
        else await BlazoredModal.CloseAsync(ModalResult.Ok(true));
        busy = false;
    }
}
