@if (responsibles is { })
{
    <Card>
        <CardBody style="max-height: 250px; overflow-y: scroll;">
            @foreach (var responsible in responsibles)
            {
                <div @key="responsible.Value.Id" class="d-flex flex-row py-2 align-items-center">
                    <InputCheckbox @bind-Value="responsible.Checked" />
                    <div class="ms-1">
                        <UserAvatar User="responsible.Value"/>
                    </div>
                    <span class="ms-2">
                        @responsible.Value.DisplayName
                    </span>
                </div>
            }
        </CardBody>
    </Card>

    <div class="row mt-4">
        <div class="col d-flex justify-content-center">
            <Button Color="ButtonColor.Success" @onclick="Confirm" >ОК</Button>
        </div>
        <div class="col d-flex justify-content-center">
            <Button Color="ButtonColor.Secondary" @onclick="Cancel">Отмена</Button>
        </div>
    </div>
}
else
{
    <span>Загрузка</span>
}

@code {
    [CascadingParameter] BlazoredModalInstance Modal { get; set; } = default!;
    List<SelectionUser>? responsibles;

    [Parameter] public List<string>? SelectedIds { get; set; }

    [Parameter, EditorRequired] 
    public IEnumerable<UserInfo> Responsibles { get; set; } = null!;

    protected override void OnInitialized()
    {
        responsibles = Responsibles
            .Select(x => new SelectionUser(SelectedIds?.Contains(x.Id!) ?? false, x))
            .ToList();
    }

    private async Task Confirm()
    {
        var selected = responsibles!
            .Where(x => x.Checked)
            .Select(x => x.Value);
        
        await Modal.CloseAsync(ModalResult.Ok(selected));
    }

    private async Task Cancel() => await Modal.CancelAsync();

    private class SelectionUser(bool isChecked, UserInfo value)
    {
        public bool Checked { get; set; } = isChecked;
        public UserInfo Value = value;
    }
}
