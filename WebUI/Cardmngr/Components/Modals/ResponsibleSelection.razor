@inject TeamMemberSelectionDialog SelectionDialog

@if (SelectedId is { })
{
    @if (EditMode)
    {
        <a class="clickable" @onclick="ShowResponsibleSelectionModal">
            <UserAvatar User="@SelectedResponsible" ShowTooltip="true" />
        </a>
    }
    else
    {
        <UserAvatar User="@SelectedResponsible" ShowTooltip="true" />
    }
}
else
{
    @if (EditMode)
    {
        <a class="text-secondary fw-light clickable" @onclick="ShowResponsibleSelectionModal" style="font-size: 12px;">
            <i>Нет</i>
        </a>
    }
    else
    {
        <i class="text-secondary fw-light" style="font-size: 12px;">Нет</i>
    }
}

@code {
    [CascadingParameter(Name = "MiddleModal")] ModalOptions ModalOptions { get; set; } = null!;

    [Parameter] public IEnumerable<UserInfo> Team { get; set; } = null!;

    [Parameter] public string? SelectedId { get; set; }
    [Parameter] public EventCallback<string?> SelectedIdChanged { get; set; }

    [Parameter] public bool EditMode { get; set; }

    private UserInfo? SelectedResponsible => Team.FirstOrDefault(x => x.Id == SelectedId);

    private async Task ShowResponsibleSelectionModal()
    {
        var selected = await SelectionDialog.ShowAsync(Team, ModalOptions);

        if (selected is { })
        {
            await SelectedIdChanged.InvokeAsync(selected.Id);
        }
    }
}