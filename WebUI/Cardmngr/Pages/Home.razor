@page "/"
@page "/home"

@attribute [Authorize]

@inject IProjectClient ProjectClient
@inject IJSRuntime JsRuntime
@inject IProjectFollowChecker ProjectFollowChecker
@inject IFeedFilterService FeedFilterService
@inject ILocalStorageService LocalStorage
@inject IToastService ToastService

<PageTitle>Р7 Карточки</PageTitle>

<AuthorizeView>
    <div class="flex w-full h-full" >

        <div class="absolute w-[350px] h-[350px]" style="left: -100px;">
            <svg xmlns="http://www.w3.org/2000/svg" version="1.1" 
                xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:svgjs="http://svgjs.dev/svgjs" 
                viewBox="0 0 800 800" opacity="0.21">
                <defs>
                    <filter id="bbblurry-filter" x="-100%" y="-100%" 
                        width="400%" height="400%" filterUnits="objectBoundingBox" 
                        color-interpolation-filters="sRGB">
                        <feGaussianBlur stdDeviation="125" x="0%" y="0%" 
                            width="100%" height="100%" 
                            in="SourceGraphic" edgeMode="none" result="blur">
                        </feGaussianBlur>
                    </filter>
                </defs>
                <g filter="url(#bbblurry-filter)">
                    <ellipse rx="400" ry="80" cx="557.4222348198216" 
                        cy="109.67276616121461"  fill="@CardmngrColors.Accent" 
                        transform="rotate(25)" >
                    </ellipse>
                </g>
            </svg>
        </div>
        <div class="projects-view backdrop-blur-md">
            <UserProjectsView Class="w-full" UserProjects="userProjects"
                MaxHeight="500" />
        </div>
        <FluentSpacer Width="200"/>

        <div @ref="feed" id="feed-content" class="flex flex-col p-3 h-full overflow-auto" style="width: 80%;">
            <div class="flex gap-3">
                <div class="flex gap-2" style="width: 60%;">
                    <div class="font-bold text-lg">Лента</div>
                    <FluentSpacer />
                    <FluentAnchor Href="feedback-board" Appearance="Appearance.Stealth" 
                        IconStart="@(new Icons.Filled.Size16.Lightbulb())">
                        Оставить отзыв
                    </FluentAnchor>
                    <FluentButton Id="feed-filter-btn" IconStart="@(new Icons.Regular.Size16.Filter())"
                        @onclick="() => _showFilterPopover = !_showFilterPopover">
                        <div class="flex gap-2 items-center">
                            <span>Фильтр</span>
                            @if (_feedFilterService != null)
                            {
                                var filterCount = FeedMsgTypes.Types.Length - _feedFilterService.ExcludedItems.Count();
                                if (filterCount > 0)
                                {
                                    <FluentBadge Circular Appearance="Appearance.Accent">
                                        @filterCount
                                    </FluentBadge>
                                }
                            }
                        </div>
                    </FluentButton>
                </div>
                <div style="width: 40%;"></div>
            </div>
            <div class="w-full flex gap-3 mt-2">
                <div style="width: 60%;" >
                    @if (_showMessageBar)
                    {
                        <FluentMessageBar Class="mb-3" Intent="@MessageIntent.Info" 
                            AllowDismiss="false" >
                            <div class="flex items-center">
                                <div>
                                    Если сайт некорректно отображает элементы, попробуйте нажать <span class="font-bold">Ctrl+F5</span>, 
                                    это очистит кеш сайта в вашем браузере. Если это не помогло, то создайте карточку в
                                    <a href="feedback-board">Пожеланиях и предложениях.</a>
                                </div>
                                <FluentSpacer />
                                <FluentIcon Value="@(new Icons.Regular.Size20.Dismiss())" Color="Color.FillInverse"
                                    OnClick="DismissMessageBar" />
                            </div>
                        </FluentMessageBar>
                    }
                    <FeedView />
                    <AppVersion />
                </div>
                <div class="flex flex-col gap-2" style="width: 40%;">
                    <Cardmngr.Pages.HomeComponents.RightSidebar />
                </div>
            </div>
        </div>

        <FluentButton 
            Id="backtotop"
            class="absolute" 
            style="right: 0; bottom: 0; margin-bottom: 60px; margin-right: 30px; display: none;"
            @onclick="BackToTopAsync"
            IconEnd="@(new Icons.Regular.Size20.ArrowUp())" 
            Appearance="Appearance.Lightweight" />

        <FluentPopover style="max-width: 320px; width: 320px; margin-top: 11px;"
            AnchorId="feed-filter-btn" Class="my-popover"
            @bind-Open="_showFilterPopover">
            <Body>
                <FeedFilterPopover OnApply="() => _showFilterPopover = false" />
            </Body>
        </FluentPopover>
        <div class="d-none cursor-not-allowed opacity-50 line-through"></div>
    </div>
</AuthorizeView>

@code {
    private bool _showMessageBar;
    private ElementReference feed;
    private IJSObjectReference? module;
    private List<Project>? userProjects;
    private FeedFilterService? _feedFilterService;
    private bool _showFilterPopover;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            userProjects = await ProjectClient
                .GetSelfProjectsAsync()
                .OrderByDescending(x => ProjectFollowChecker.IsFollow(x.Id))
                .ToListAsync().ConfigureAwait(false);
        }
        catch (HttpRequestException e)
        {
            ToastService.ShowError(e.Message);
            userProjects = [];
        }
        
        await FeedFilterService.ConfigureAsync().ConfigureAwait(false);

        _feedFilterService = (FeedFilterService)FeedFilterService;

        var dismissed = await LocalStorage.GetItemAsync<bool>("refresh-data-msg-bar-dismissed")
            .ConfigureAwait(false);
        
        if (!dismissed)
        {
            _showMessageBar = true;
        }
    }

    private async Task DismissMessageBar()
    {
        await LocalStorage.SetItemAsync("refresh-data-msg-bar-dismissed", true).ConfigureAwait(false);
        _showMessageBar = false;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            module = await JsRuntime.InvokeAsync<IJSObjectReference>("import", 
                "/js/backtotop.js").ConfigureAwait(false);
            await module.InvokeVoidAsync("registerHandlers", "feed-content", "backtotop").ConfigureAwait(false);
        }
    }

    async Task BackToTopAsync()
    {
        await JsRuntime.InvokeVoidAsync("scrollToPosition", feed, 0, 150).ConfigureAwait(false);
    }
}
