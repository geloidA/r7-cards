@page "/project/gantt"

@using Cardmngr.Components.ProjectAggregate.Components
@using Cardmngr.Components.ProjectAggregate.Filter
@using Cardmngr.Exceptions
@using Cardmngr.Shared.Utils.Filter
@using KolBlazor.Components.Charts.Data

@inherits ProjectPage

<PageTitle>Проект</PageTitle>

<MutableProjectState @ref="@_projectState" Id="@ProjectId.GetValueOrDefault(-1)" AutoRefresh="false" >
    <ProjectStateNotifier />
    <div class="flex flex-col h-full p-3">
        <div class="mb-2">
            <div class="flex gap-2 items-center">
                <OpenTaskStatusSwitcher />
                <FluentSpacer />
                <ProjectTextFieldFilterTool />
                <ProjectOptions />
            </div>
        </div>
        <Smooth ShowOnFirstRender Style="height: calc(100% - 32px);" >
            <ProjectGantt GetItems="GetItems" 
                            ItemExpandToggled="OnItemExpandToggled" 
                            Statuses="_projectState.Statuses" />
        </Smooth>
    </div>
</MutableProjectState>

@code {
    private readonly Dictionary<Milestone, bool> _milestoneExpanded = [];
    private IFilterableProjectState _projectState = null!;

    private IEnumerable<GanttChartItem> GetItems()
    {
        return [new GanttChartItem
        {
            Data = _projectState,
            Start = _projectState.Start(),
            End = _projectState.Deadline(),
            Children = GetChildren().ToList(),
            IsExpanded = true
        }];
    }

    private IEnumerable<GanttChartItem> GetChildren()
    {
        var milestoneTasks = _projectState.Milestones
            .Select(milestone => 
            {
                Console.WriteLine(milestone);
                return new GanttChartItem
                {
                    Data = milestone,
                    Start = _projectState.GetMilestoneStart(milestone),
                    End = milestone.Deadline,
                    Children = _projectState
                        .GetMilestoneTasks(milestone)
                        .Filter(_projectState.TaskFilter)
                        .Select(GetTaskGanttItem)
                        .OrderBy(x => x.Start)
                        .ToList(),
                    IsExpanded = _milestoneExpanded.TryGetValue(milestone, out var value) && value
                };
            });

        if (_projectState.TaskFilter.Filters.Any())
        {
            milestoneTasks = milestoneTasks.Where(x => x.Children.Any());
        }

        var tasks = _projectState.FilteredTasks()
            .Where(t => !t.MilestoneId.HasValue)
            .Select(GetTaskGanttItem);

        return milestoneTasks
            .Concat(tasks)
            .OrderBy(x => x.Start);
    }

    private static GanttChartItem GetTaskGanttItem(OnlyofficeTask task)
    {
        return new GanttChartItem
        {
            Data = task,
            Start = task.StartDate ?? task.Created,
            End = task.GetSmartDeadline()
        };
    }

    private void OnItemExpandToggled(GanttChartItem item)
    {
        InvokeAsync(() =>
        {
            Console.WriteLine("Item expand toggled");
            if (item.Data is Milestone milestone)
            {
                Console.WriteLine($"Milestone {milestone} expanded: {item.IsExpanded}");
                _milestoneExpanded[milestone] = item.IsExpanded;
            }
        });
    }
}