@page "/login"

@inject NavigationManager NavigationManager
@inject ILocalStorageService LocalStorage

<PageTitle>Вход</PageTitle>

<div class="d-flex justify-content-center mt-5 align-items-center fs-1 fw-bold">
    ИСПОЛЬЗУЙТЕ УЧЕТНЫЕ ДАННЫЕ ОТ ВАШЕГО
    <FluentBadge style="background-color: orange !important; color: black !important;"
        Circular="true" class="align-self-center ms-2 fs-1">Р7 Офис</FluentBadge>
    <span class="ms-2">АККАУНТА</span>
</div>

@code {
    [CascadingParameter] Task<AuthenticationState>? AuthenticationState { get; set; }
    [CascadingParameter] IModalService Modal { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        if (AuthenticationState is { })
        {
            var state = await AuthenticationState;
            if (state.User.Identity!.IsAuthenticated)
            {
                NavigationManager.NavigateTo("/");
            }
            else
            {
                var res = await ShowAuthentication();

                if (res.Confirmed)
                {
                    await LocalStorage.SetItemAsStringAsync("isauthenticated", "true");
                    NavigationManager.NavigateTo("/", true);
                }
            }
        }
    }

    async Task<ModalResult> ShowAuthentication()
    {
        var options = new ModalOptions
        {
            DisableBackgroundCancel = true,
            HideCloseButton = true,
            Position = ModalPosition.Middle
        };

        return await Modal.Show<Components.Modals.AuthModal>("Авторизация", options).Result;
    }
}
