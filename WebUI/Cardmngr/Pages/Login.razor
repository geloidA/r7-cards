@page "/login"
@using Cardmngr.Validators
@using Onlyoffice.Api.Models.Authentication

@inject NavigationManager NavigationManager
@inject ILocalStorageService LocalStorage
@inject IAuthApiLogic AuthApiLogic
@inject IToastService ToastService

<PageTitle>Вход</PageTitle>

<div class="absolute z-10 left-5 top-5">    
    <div class="flex gap-2 items-center justify-center select-none">
        <img src="favicon.svg" width="32px" />
        <div class="text-lg font-semibold">Р7 карточки</div>
    </div>

</div>

<div class="absolute z-10 left-[10%] h-full w-[400px]">
    <div class="flex flex-col h-full">
        <FluentSpacer />
        <div class="mb-10">
            <div class="font-bold text-5xl text-inverse mb-5">Вход</div>
            <FluentMessageBar AllowDismiss="false" Intent="@MessageIntent.Warning">
                Используйте учетные данные от Р7 Офис
            </FluentMessageBar>
        </div>
        <FluentEditForm Model="loginData" OnValidSubmit="AuthorizeAsync">
            <FluentValidationValidator />
            <div class="flex flex-col gap-4">
                <div class="flex flex-col">
                    <FluentTextField id="UserName" @bind-Value="loginData.UserName" Placeholder="Почта" />
                    <FluentValidationMessage For="() => loginData.UserName" />
                </div>

                <div class="flex flex-col">
                    <FluentTextField id="Password" TextFieldType="@(showPassword ? TextFieldType.Text : TextFieldType.Password)"
                                    @bind-Value="loginData.Password" Immediate Placeholder="Пароль">
                        <FluentIcon Slot="end" Value="ShowPasswordIcon" 
                                    @onclick="() => showPassword = !showPassword" />
                    </FluentTextField>
                    <FluentValidationMessage For="() => loginData.Password" />
                </div>

                <div class="flex justify-center mt-5">
                    <FluentButton Type="ButtonType.Submit" 
                                Class="w-full"
                                BackgroundColor="@CardmngrColors.Inverse"
                                Color="var(--neutral-fill-rest)"
                                Loading="busy" >
                        <span class="font-bold">Войти</span>
                    </FluentButton>
                </div>
            </div>
        </FluentEditForm>
        <FluentSpacer />
    </div>
</div>

<div class="gradient-bg">
    <svg xmlns="http://www.w3.org/2000/svg">
        <defs>
            <filter id="goo">
                <feGaussianBlur in="SourceGraphic" stdDeviation="10" result="blur" />
                <feColorMatrix in="blur" mode="matrix" values="1 0 0 0 0  0 1 0 0 0  0 0 1 0 0  0 0 0 18 -8" result="goo" />
                <feBlend in="SourceGraphic" in2="goo" />
            </filter>
        </defs>
    </svg>
    <div class="gradients-container">
        <div class="g1"></div>
        <div class="g2"></div>
        <div class="g3"></div>
        <div class="g4"></div>
        <div class="g5"></div>
        <div class="interactive"></div>
    </div>
</div>

@code {
    private readonly LoginData loginData = new();    
    private bool showPassword;
    private bool busy;
    
    Icon ShowPasswordIcon => showPassword ? new Icons.Regular.Size16.EyeOff() : new Icons.Regular.Size16.Eye();

    [CascadingParameter] Task<AuthenticationState>? AuthenticationState { get; set; }
    [CascadingParameter] IModalService Modal { get; set; } = default!;
    
    [SupplyParameterFromQuery]
    public string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (AuthenticationState is not null)
        {
            var state = await AuthenticationState;
            if (state.User.Identity!.IsAuthenticated)
            {
                NavigationManager.NavigateTo(ReturnUrl ?? "/", true);
            }
        }
    }

    private async Task AuthorizeAsync()
    {
        busy = true;

        var status = await AuthApiLogic.LoginAsync(new LoginModel(loginData.UserName, loginData.Password))
            .ConfigureAwait(false);

        if (status == AuthenticationResponseType.Error)
        {
            ToastService.ShowError("Ошибка авторизации");
        }
        else
        {
            await LocalStorage.SetItemAsStringAsync("isauthenticated", "true").ConfigureAwait(false);
            NavigationManager.NavigateTo(ReturnUrl ?? "/", true);
        }

        busy = false;
    }
}
